/*****************************************************************************
 *  Copyright (C) 2008-2011 Massachusetts Institute of Technology            *
 *                                                                           *
 *  Permission is hereby granted, free of charge, to any person obtaining    *
 *  a copy of this software and associated documentation files (the          *
 *  "Software"), to deal in the Software without restriction, including      *
 *  without limitation the rights to use, copy, modify, merge, publish,      *
 *  distribute, sublicense, and/or sell copies of the Software, and to       *
 *  permit persons to whom the Software is furnished to do so, subject       *
 *  to the following conditions:                                             *
 *                                                                           *
 *  The above copyright notice and this permission notice shall be included  *
 *  in all copies or substantial portions of the Software.                   *
 *                                                                           *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY                *
 *  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE               *
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      *
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE   *
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   *
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    *
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE           *
 *                                                                           *
 *  This source code is part of the PetaBricks project:                      *
 *    http://projects.csail.mit.edu/petabricks/                              *
 *                                                                           *
 *****************************************************************************/
%option caseless
%option nostdinit
%option noyywrap
%option noyy_push_state
%option noyy_pop_state
%option noyy_top_state
%option nounput
%option interactive
%option always-interactive
%option prefix="maxima"
%option outfile="lex.yy.c"

%{

#include "formula.h"
#include "maximaparser.h"

#include "common/jassert.h"
#include "common/jconvert.h"

#include <stdio.h>

#define yylval maximalval
#define NUM_STR_BUFFERS 64

static const char* circularStringCache(const char* str){
  static std::string strbuffers[NUM_STR_BUFFERS];
  static int n = 0;
  return (strbuffers[n++ % NUM_STR_BUFFERS]=str).c_str();
}

#define YY_INPUT(buf,result,max_size) \
    result = read(fileno(maximain), buf, 1);

#define YY_USER_ACTION yylval.str=circularStringCache(yytext);
#define YY_DECL int yylex()

%}

%x output

PASS_CHARS [=<>,*/()[\]\n^+-]
WS [ \r\n\t]

%%

<INITIAL>{
  [^()]+     /*nothing*/
  .          /*nothing*/
}

<output>{
  {WS}+               /* whitespace */
  "<="                return LE;
  ">="                return GE;
  "true"              return BOOL_T;
  "false"             return BOOL_F;
  "equal"             return STR_EQUAL;
  "ceiling"           return STR_CEILING;
  "floor"             return STR_FLOOR;
  "if"                return IF;
  "then"              return THEN;
  "else"              return ELSE;
  "and"               return AND;
  "or"                return OR;
  {PASS_CHARS}        return yytext[0];
  [0-9]+              return INTEGER;
  [0-9]+[.][0-9]+     return FLOAT;
  [0-9]+[.][0-9]+E[-][0-9]+ return FLOATEXP;
  [a-z_][a-z0-9_]*    return IDENT;
}

<*>{
  [(][%]o[0-9]+[)][ ] BEGIN(output);  return OPROMPT;
  [(][%]i[0-9]+[)][ ] BEGIN(INITIAL); return IPROMPT;
  .                   JASSERT(false)(yytext).Text("Unhandled input");
}

%%



