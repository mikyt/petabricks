/*****************************************************************************
 *  Copyright (C) 2008-2011 Massachusetts Institute of Technology            *
 *                                                                           *
 *  Permission is hereby granted, free of charge, to any person obtaining    *
 *  a copy of this software and associated documentation files (the          *
 *  "Software"), to deal in the Software without restriction, including      *
 *  without limitation the rights to use, copy, modify, merge, publish,      *
 *  distribute, sublicense, and/or sell copies of the Software, and to       *
 *  permit persons to whom the Software is furnished to do so, subject       *
 *  to the following conditions:                                             *
 *                                                                           *
 *  The above copyright notice and this permission notice shall be included  *
 *  in all copies or substantial portions of the Software.                   *
 *                                                                           *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY                *
 *  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE               *
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      *
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE   *
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   *
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    *
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE           *
 *                                                                           *
 *  This source code is part of the PetaBricks project:                      *
 *    http://projects.csail.mit.edu/petabricks/                              *
 *                                                                           *
 *****************************************************************************/
%{
#include "formula.h"
#include "common/jconvert.h"
#include <stdio.h>
#include <map>

using namespace petabricks;

extern int yylex (void);
static int yyerror(FormulaListPtr&, const char* msg){ JASSERT(false)(msg).Text("parse error"); return 0;}

static jalib::JRefPool theRefPool;
#define REFALLOC(args...) (theRefPool.add(new args))

static void clearParserCaches(){
  theRefPool.clear();
}

%}

%union {
  bool b;
  int i;
  double d;
  const char* str;
  petabricks::Formula*        formula;
  petabricks::FormulaList*    formulas;
}

%defines
%locations
%expect 0
%name-prefix="maxima"
%start Start
%error-verbose
%parse-param { petabricks::FormulaListPtr& ret };

%token IPROMPT OPROMPT LE GE BOOL_T BOOL_F STR_EQUAL STR_FLOOR STR_CEILING IF THEN ELSE
%token <str> IDENT INTEGER FLOAT
%type <b> Bool
%type <i> Integer
%type <d> Float
%type <formula> Formula FormulaBinop FormulaIf
%type <formulas> OutputContent OptFormulaList FormulaList


%left AND OR
%nonassoc '=' '<' '>' LE GE
%right IF THEN ELSE
%left '-' '+'
%left '*' '/'
%left '^'
%right NOT

%%

Start: InputPrompt
{
  ret = REFALLOC(FormulaList()); 
  clearParserCaches();
  return 0;
}
     | OutputPrompt OutputContent InputPrompt
{
  ret = $2;
  clearParserCaches();
  return 0;
};


InputPrompt: IPROMPT;
OutputPrompt: OPROMPT;

OutputContent: Formula                          { ($$=REFALLOC(FormulaList()))->push_back($1); }
             | '[' OptFormulaList ']'          { ($$=$2); }
             | '[' '[' OptFormulaList ']' ']'  { ($$=$3); }
;


Formula: IDENT   { $$=REFALLOC( FormulaVariable($1) ); }
       | Integer { $$=REFALLOC( FormulaInteger( $1) ); }
       | Bool    { $$=REFALLOC( FormulaBool($1) ); }
       | Float   { $$=REFALLOC( FormulaFloat(  $1) );  }
       | '(' Formula ')' { $$=$2; } 
       | FormulaBinop    { $$=$1; }
       | FormulaIf       { $$=$1; };

FormulaIf: IF Formula THEN Formula { $$=REFALLOC( FormulaIf($2, $4)); }
         | IF Formula THEN Formula ELSE Formula { $$=REFALLOC( FormulaIf($2, $4, $6)); };

FormulaBinop: Formula '+' Formula { $$=REFALLOC(FormulaBinop<'+'>($1,$3)); }
            | Formula '-' Formula { $$=REFALLOC(FormulaBinop<'-'>($1,$3)); }
            | Formula '*' Formula { $$=REFALLOC(FormulaBinop<'*'>($1,$3)); }
            | Formula '/' Formula { $$=REFALLOC(FormulaBinop<'/'>($1,$3)); }
            | Formula '=' Formula { $$=REFALLOC(FormulaBinop<'='>($1,$3)); }
            | Formula '<' Formula { $$=REFALLOC(FormulaBinop<'<'>($1,$3)); }
            | Formula '>' Formula { $$=REFALLOC(FormulaBinop<'>'>($1,$3)); }
            | Formula '^' Formula { $$=REFALLOC(FormulaBinop<'^'>($1,$3)); }
            | Formula LE  Formula { $$=REFALLOC(FormulaLE($1,$3)); }
            | Formula GE  Formula { $$=REFALLOC(FormulaGE($1,$3)); }
            | Formula AND Formula { $$=REFALLOC(FormulaAnd($1,$3)); }
            | Formula OR Formula { $$=REFALLOC(FormulaOr($1,$3)); }
            | STR_EQUAL '(' Formula ',' Formula ')' { $$=REFALLOC(FormulaBinop<'='>($3,$5)); }
            | STR_FLOOR   '(' Formula ')' { $$=$3; }
            | STR_CEILING '(' Formula ')' { $$=$3; }
            | '-' Formula { $$=REFALLOC(FormulaBinop<'-'>(FormulaInteger::zero(),$2)); };

FormulaList: Formula                 { ($$=REFALLOC(FormulaList()))->push_back($1); }
           | FormulaList ',' Formula { ($$=$1)->push_back($3); };

OptFormulaList: Nil         { $$=REFALLOC(FormulaList()); }
              | FormulaList { $$=$1; };

Nil:;
Integer: INTEGER { $$=jalib::StringToX<int>($1); };
Bool: BOOL_T { $$=true;  }
    | BOOL_F { $$=false; };
Float: FLOAT { $$=jalib::StringToX<double>($1); };

%%

FormulaListPtr readFormulaFromMaxima(){
  FormulaListPtr ret;
  maximaparse(ret);
  return ret;
}

