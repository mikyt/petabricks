/*****************************************************************************
 *  Copyright (C) 2008-2011 Massachusetts Institute of Technology            *
 *                                                                           *
 *  Permission is hereby granted, free of charge, to any person obtaining    *
 *  a copy of this software and associated documentation files (the          *
 *  "Software"), to deal in the Software without restriction, including      *
 *  without limitation the rights to use, copy, modify, merge, publish,      *
 *  distribute, sublicense, and/or sell copies of the Software, and to       *
 *  permit persons to whom the Software is furnished to do so, subject       *
 *  to the following conditions:                                             *
 *                                                                           *
 *  The above copyright notice and this permission notice shall be included  *
 *  in all copies or substantial portions of the Software.                   *
 *                                                                           *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY                *
 *  KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE               *
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND      *
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE   *
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION   *
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION    *
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE           *
 *                                                                           *
 *  This source code is part of the PetaBricks project:                      *
 *    http://projects.csail.mit.edu/petabricks/                              *
 *                                                                           *
 *****************************************************************************/
%{

#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#pragma GCC diagnostic ignored "-Warray-bounds"
#endif

#include "ruleir.h"
#include "formula.h"
#include "common/jconvert.h"
#include "common/srcpos.h"
#include <stdio.h>
#include <map>

#include "libpbcompiler_a-ruleirparser.h"

using namespace petabricks;

extern int ruleirlineno;
extern std::string ruleirfilename;

extern int yylex (void);
static int yyerror(const RIRBlockCopyRef&, const char* msg){ 
  JASSERT(false)(ruleirfilename)
                (ruleirlineno)
                (msg)
                .Text("parse error"); 
  return 0;
}

//   template<typename T>
//   T* debugtagpos(T* t) {
//     JTRACE("TAGPOS")(t->srcPos())(ruleirlineno)(ruleirfilename);
//     return t;
//   }

static jalib::JRefPool theRefPool;
#define P(A) (TAGPOS(A, yylloc))
#define REFALLOC(args...) P(theRefPool.add(new args))


static void clearParserCaches(){
  theRefPool.clear();
}
void ruleirparser_addRefPoolItem(jalib::JRefCounted* i){
  theRefPool.add(i);
}

#define YYLEX_PARAM &yylval, &yylloc
extern int ruleirlex(YYSTYPE * yylval_param,YYLTYPE * yylloc_param);
%}

%union {
  const char* str;
  petabricks::RIRExpr*  expr;
  petabricks::RIRStmt*  stmt;
  petabricks::RIRBlock* block;
}

%defines
%locations
//%expect 2
%name-prefix="ruleir"
%start Start
%parse-param { petabricks::RIRBlockCopyRef& ret };

%type <str> TOK_OP TOK_LIT TOK_IDENT TOK_RAW
%type <expr> Op ExtraOps
%type <expr> Lit
%type <expr> Ident
%type <expr> ExprElement Expr RootExpr OptExpr
%type <expr> Call Paren
%type <expr> Args OptArgs

%type <stmt> Stmt IfStmt LoopStmt BlockStmt RawStmt ReturnStmt IntlzrStmt SwitchStmt CaseStmt
%type <block> Block

%left TOK_OP TOK_LIT TOK_IDENT TOK_IF TOK_THEN TOK_ELSE TOK_FOR TOK_WHILE TOK_DO TOK_RETURN TOK_BREAK TOK_CONTINUE TOK_RAW TOK_SWITCH TOK_CASE TOK_DEFAULT TOK_FORENOUGH TOK_SPAWN

%%

Start: Block {
  ret=$1;
}

Block: Block Stmt {($$=$1)->addStmt($2);}
     | Nil        {$$=REFALLOC(RIRBlock());};

Stmt: RootExpr ';' {($$=REFALLOC(RIRBasicStmt()))->addExpr($1);}
    | Nil      ';' {($$=REFALLOC(RIRBasicStmt()));}
    | IfStmt       {$$=$1;}
    | LoopStmt     {$$=$1;}
    | SwitchStmt   {$$=$1;}
    | CaseStmt     {$$=$1;}
    | BlockStmt    {$$=$1;}
    | ReturnStmt   {$$=$1;}
    | IntlzrStmt   {$$=$1;}
    | RawStmt      {$$=$1;};

IfStmt: TOK_IF '(' Expr ')' Stmt {
  $$=REFALLOC(RIRIfStmt($5));
  $$->addExpr($3);
};

IfStmt: TOK_IF '(' Expr ')' Stmt TOK_ELSE  Stmt {
  $$=REFALLOC(RIRIfStmt($5, $7));
  $$->addExpr($3);
};

SwitchStmt: TOK_SWITCH '(' Expr ')' Stmt {
  $$=REFALLOC(RIRSwitchStmt($5));
  $$->addExpr($3);
};

LoopStmt: TOK_FORENOUGH '(' Expr ';' Expr ')' Stmt {
  $$=REFALLOC(RIRLoopStmt($7))->initForEnough($3, $5);
};

LoopStmt: TOK_FORENOUGH Stmt {
  $$=REFALLOC(RIRLoopStmt($2))->initForEnough();
};

LoopStmt: TOK_FOR '(' OptExpr ';' OptExpr ';' OptExpr ')' Stmt {
  $$=REFALLOC(RIRLoopStmt($9));
  $$->addExpr($3);
  $$->addExpr($5);
  $$->addExpr($7);
};

LoopStmt: TOK_WHILE '(' Expr ')' Stmt {
  $$=REFALLOC(RIRLoopStmt($5));
  $$->addExpr(REFALLOC(RIRNilExpr()));
  $$->addExpr($3);
  $$->addExpr(REFALLOC(RIRNilExpr()));
};

LoopStmt: TOK_DO Stmt TOK_WHILE '(' Expr ')' ';'{
  $$=REFALLOC(RIRLoopStmt($2));
  UNIMPLEMENTED();
};

IntlzrStmt: RootExpr '{' RootExpr '}' ';' {
  $$=REFALLOC(RIRBasicStmt());
  $$->addExpr($1);
  $$->addExpr(REFALLOC(RIROpExpr("{")));
  $$->addExpr($3);
  $$->addExpr(REFALLOC(RIROpExpr("}")));
};

BlockStmt: '{' Block '}' {
  $$=REFALLOC(RIRBlockStmt($2));
};

ReturnStmt: TOK_RETURN Expr ';' {
  $$=REFALLOC(RIRReturnStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("return")));
  $$->addExpr($2);
};

ReturnStmt: TOK_RETURN ';' {
  $$=REFALLOC(RIRReturnStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("return")));
};
ReturnStmt: TOK_BREAK ';' {
  $$=REFALLOC(RIRBreakStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("break")));
};
ReturnStmt: TOK_CONTINUE ';' {
  $$=REFALLOC(RIRContinueStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("continue")));
};

CaseStmt: TOK_CASE Expr {
  $$=REFALLOC(RIRCaseStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("case")));
  $$->addExpr($2);
};

CaseStmt: TOK_DEFAULT ':' {
  $$=REFALLOC(RIRCaseStmt());
  $$->addExpr(REFALLOC(RIRKeywordExpr("default")));
  $$->addExpr(REFALLOC(RIROpExpr(":")));
};



RawStmt: TOK_RAW {
  $$=REFALLOC(RIRRawStmt($1));
};


OptExpr: Expr {($$=$1);}
       | Nil  {($$=REFALLOC(RIRChainExpr()));};

Expr: Expr ExprElement     {($$=$1)->addSubExpr($2);}
    | ExprElement          {($$=REFALLOC(RIRChainExpr()))->addSubExpr($1);};

RootExpr: RootExpr ExprElement {($$=$1)->addSubExpr($2);}
        | ExprElement          {($$=REFALLOC(RIRChainExpr()))->addSubExpr($1);};

ExprElement: Op                {$$=$1;}
           | ExtraOps          {$$=$1;}
           | Lit               {$$=$1;}
           | Ident             {$$=$1;}
           | Call              {$$=$1;}
           | Paren             {$$=$1;};

ExtraOps: '?' {$$=REFALLOC(RIROpExpr("?"));}
        | ':' {$$=REFALLOC(RIROpExpr(":"));};

Call: Ident '(' OptArgs ')'  { 
  $$=REFALLOC(RIRCallExpr()); 
  $$->addSubExpr($1);
  $$->addSubExpr($3);
};
Call: TOK_SPAWN Ident '(' OptArgs ')'  { 
  $$=REFALLOC(RIRCallExpr()); 
  $$->addSubExpr(REFALLOC(RIRKeywordExpr("spawn")));
  $$->addSubExpr($2);
  $$->addSubExpr($4);
};

Paren: '(' Expr ')' {
  $$=REFALLOC(RIRChainExpr());
  $$->addSubExpr(REFALLOC(RIROpExpr("(")));
  $$->addSubExpr($2);
  $$->addSubExpr(REFALLOC(RIROpExpr(")")));
};

Args: Expr { ($$=REFALLOC(RIRArgsExpr()))->addSubExpr($1); }

OptArgs: Nil   {$$=REFALLOC(RIRArgsExpr());}
       | Args  {$$=$1;};

Op:    TOK_OP    {$$=REFALLOC(RIROpExpr($1));};
Lit:   TOK_LIT   {$$=REFALLOC(RIRLitExpr($1));};
Ident: TOK_IDENT {$$=REFALLOC(RIRIdentExpr($1));};

Nil:;

%%

void _ruleirlexer_scan_string( const std::string& str, const jalib::SrcPosTaggable* pos);

RIRBlockCopyRef parseRuleBody(const std::string& str, const jalib::SrcPosTaggable* pos){
  //JTRACE("Parsing rule body")(str);
  _ruleirlexer_scan_string(str, pos);
  RIRBlockCopyRef ret;
  ruleirparse(ret);
  clearParserCaches();
  return ret;
}


