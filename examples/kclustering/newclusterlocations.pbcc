#ifndef NEWCLUSTERLOCATIONS_PBCC
#define NEWCLUSTERLOCATIONS_PBCC

transform NewClusterLocationsGen
to X[n,2], A[n]
{
  X.cell(i,j) from() { return PetabricksRuntime::randInt(-50,50); }
  A.cell(i) from() { return PetabricksRuntime::randInt(0,n-1); }
}

transform NewClusterLocations
param k //input parameter: number of clusters
from X[n,2], A[n]
through Sum[k,2], Count[k]
to C[k,2] 
generator NewClusterLocationsGen
{
  to (Sum s, Count count) from (X x, A a)
  {
    int i, j;
    //zero s and count
    for(i=0;i<k;i++){
      s.cell(i,0)=0;
      s.cell(i,1)=0;
      count.cell(i)=0;
    }
    for (i=0; i<n; i++) {
      j=a.cell(i);
      #ifdef DEBUG
      JASSERT(j>=0 && j<=k)(j);
      #endif
      s.cell(j,0)+=x.cell(i,0);
      s.cell(j,1)+=x.cell(i,1);
      count.cell(j)+=1;
    }
  }

  /*to (C.column(i) c) from (Sum.column(i) s, Count.cell(i) count) 
  {
    if (count == 0) {
      c.cell(0)=0;
      c.cell(1)=0;
    }
    else {
      c.cell(0)=s.cell(0)/count;
      c.cell(1)=s.cell(1)/count;
    }
  }*/

  to (C.cell(i,j) c) from (Sum.cell(i,j) s, Count.cell(i) count) 
  {
    if (count == 0) {
      c=0;
    }
    else {
      c=s/count;
    }
  }
}

#endif // NEWCLUSTERLOCATIONS_PBCC
