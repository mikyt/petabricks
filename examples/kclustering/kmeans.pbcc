#ifndef KMEANS_PBCC
#define KMEANS_PBCC

//#ifndef k
//#define k 5

#include "../simple/copy.pbcc"
#include "newclusterlocations.pbcc"
#include "assignclusters.pbcc"
#include "distance.pbcc"
#include "../simple/rollingsum.pbcc"
//#include "clusterinputgen.pbcc"

transform GetD
from X[m,2], C[n,2]
to D[m,n]
{
  to (D.cell(i,j) d) from (X.column(i) a, C.column(j) b)
  {
    ElementT xdiff, ydiff;
    xdiff = a.cell(0)-b.cell(0);
    ydiff = a.cell(1)-b.cell(1);
    d = sqrt(xdiff*xdiff + ydiff*ydiff);
  }
}

transform GetMin
from X[m,n]
to MinX[m]
{
  MinX.cell(i) from(X.column(i) x){
    int j;
    ElementT minvalue=x.cell(0);
    for (j=1; j<n; j++) {
      if (x.cell(j) < minvalue) {
        minvalue=x.cell(j);
      }
    }
    return minvalue*minvalue;
  }
}

transform randomcenter
from X[n,2]
through Xtemp[n,2]
to C[k,2]
generator kmeansinputgen
{
  to (C c, Xtemp x) from (X xin){
    int l;
    int m;

    Copy2D(x,xin);
//    Copy1D(c.column(0), x.column(0));

    for (m=0; m<k; m++) 
    {
      l = PetabricksRuntime::randInt(m,n);
      Copy1D(c.column(m),x.column(l)); //new center picked
      if (l!=m) { 
        Copy1D(x.column(l), x.column(m)); 
      }//swap columns for next iteration
    }
  }

}



transform centerplus
from X[n,2]
through D[n,k], DMIN[n], DSQ[n], Xtemp[n,2]
to C[k,2]
generator kmeansinputgen
{
  to (C c, D d, DMIN dmin, DSQ dsq, Xtemp x) from (X xin){
    int l;
    int m;
    ElementT rvalue;


    Copy2D(x,xin);
    Copy1D(c.column(0), x.column(0));

    for (m=1; m<k; m++) {

      //get distance of all remanining x with current cluster centers
      GetD(d.region(m,0,n,m), x.region(m,0,n,2), c.region(0,0,m,2));

      //find minimum of each column, squared and compute cumulative sum
      GetMin(dmin.region(m,n), d.region(m,0,n,m));
      RollingSum(dsq.region(m,n),dmin.region(m,n));

      //pick center with probability proportional to dmin (D(x)^2)
      //rvalue= ( (double)PetabricksRuntime::randInt() / ((double)(RAND_MAX)+(double)(1)) );
      //rvalue*=dsq.cell(n-1);
      rvalue=PetabricksRuntime::randDouble(0,1)*dsq.cell(n-1);
      for (l=m; l<n; l++){
        if (rvalue<=dsq.cell(l)){
          Copy1D(c.column(m),x.column(l)); //new center picked
          if (l!=m) { Copy1D(x.column(l), x.column(m)); }//swap columns for next iteration
          break;
        }
      }
    }
  }
}

            
main transform kmeans
from X[n,2]    // X - x,y coordinates of n points
through Ctemp[k,2]
to C[k,2], A[n]   // C - centroids, A - cluster assignment, WCSS - within-cluster sum of squares  (error measures)
accuracy_metric WCSS
accuracy_bins 0.025, 0.05, 0.1, 0.2, 0.5, 0.75, 0.95
accuracy_variable k(1,1)//min=1, initial=1
//param k
generator kmeansinputgen
{

  //Assign initial cluster centers randomly
  to (Ctemp ctemp) from (X x)
  {
    //Copy2D(ctemp,x.region(0,0,k,2));
    if(k>n)
      PetabricksRuntime::abort();
    randomcenter(ctemp, x);
  }

  //Assign initial cluster centers at the beginning
  to (Ctemp ctemp) from (X x)
  {
    Copy2D(ctemp,x.region(0,0,k,2));
  }

  //or Assign initial cluster centers using k-means++ algorithm
  to (Ctemp ctemp) from (X x)
  {
    if(k>n)
      PetabricksRuntime::abort();
    centerplus(ctemp, x);
  }

 ////iteratively find local optimum
 //to (C c, A a) from (X x, Ctemp ctemp)
 //{
 //  ElementT change=1;
 //  Copy2D(c,ctemp);    
 //  AssignClusters(a,change,x,c,a);
 //  for_enough {
 //    if (change > 0) { 
 //      NewClusterLocations(c, x, a);
 //    }else{
 //      break;
 //    }
 //    AssignClusters(a,change,x,c,a);
 //  }
 //}



  // classic kmeans
  to (C c, A a) from (X x, Ctemp ctemp)
  {
    ElementT change=1;
    Copy2D(c,ctemp);    
    AssignClusters(a,change,x,c,a);
    while ( true ) {
      if (change > 0) { 
        NewClusterLocations(c, x, a);
      }else{
        break;
      }
      AssignClusters(a,change,x,c,a);
    }
  }

  // classic kmeans
  to (C c, A a) from (X x, Ctemp ctemp)
  {
    ElementT change=1;
    Copy2D(c,ctemp);    
    AssignClusters(a,change,x,c,a);
    while ( true ) {
      if (change > n/4) { 
        NewClusterLocations(c, x, a);
      }else{
        break;
      }
      AssignClusters(a,change,x,c,a);
    }
  }

  // classic kmeans
  to (C c, A a) from (X x, Ctemp ctemp)
  {
    ElementT change=1;
    Copy2D(c,ctemp);    
    AssignClusters(a,change,x,c,a);
    while ( true ) {
      if (change > n/2) { 
        NewClusterLocations(c, x, a);
      }else{
        break;
      }
      AssignClusters(a,change,x,c,a);
    }
  }


  // classic kmeans
  to (C c, A a) from (X x, Ctemp ctemp)
  {
    ElementT change=1;
    Copy2D(c,ctemp);    
    AssignClusters(a,change,x,c,a);
    while ( true ) {
      if (change > 3*n/4) { 
        NewClusterLocations(c, x, a);
      }else{
        break;
      }
      AssignClusters(a,change,x,c,a);
    }
  }

}

transform WCSS
from C[k,2], A[n], X[n,2]
to Accuracy
{

  //accuracy measure
  Accuracy from(X x, C c, A a)
  {
    ElementT dis;
    ElementT sum;
    int i;
    sum=0;
    for (i=0; i< n; i++) {
      DistanceSQ(dis, x.column(i), c.column(a.cell(i)));
      sum+=dis;
    }
    
    //scale between 0 and 1:
    //assuming input is 2D-random matrix with entries from the range  0-100,
    //maximum possible distance is sqrt(20000); 
    //sum=sum/n/sqrt(20000);
    //sum=sum/n/100;
    //if ( sum > 1 ) { return 0;} 
    //else { return 1-sum;}
    if(sum<=0)
      return 0;

    return sqrt(2*n/sum);
  }

}

transform kmeansinputgen
to X[n,2]
{
  X.cell(i,j) from() { return PetabricksRuntime::randDouble(-250,250); }
}

#endif // KMEANS_PBCC
