#ifndef ASSIGNCLUSTERS_PBCC
#define ASSIGNCLUSTERS_PBCC

//#ifndef
//#define k 3
//#endif

#include "distance.pbcc"

transform AssignClustersGen
to X[n,2], C[n/10,2], A[n]
{
  X.cell(i,j) from() { return PetabricksRuntime::randDouble(-50,50); }
  C.cell(i,j) from() { return PetabricksRuntime::randDouble(-50,50); }
  A.cell(i) from() { return PetabricksRuntime::randInt(0,n/10-1); }
}


transform AssignClusters
from X[n,2], C[k,2], A[n]
through D[n,k], ctemp[n]
to Anew[n], cflag
generator AssignClustersGen
{

	to (D.cell(i,j) d) from (X.column(i) a, C.column(j) b)
	{
		//Distance(d,x,c);
    ElementT xdiff, ydiff;
    xdiff = a.cell(0)-b.cell(0);
    ydiff = a.cell(1)-b.cell(1);
    d = sqrt(xdiff*xdiff + ydiff*ydiff);
	}

	to(Anew.cell(i) anew, ctemp.cell(i) changed) from(D.column(i) d, A.cell(i) aold)
	{
    IndexT oldindex = aold;
		IndexT minindex = 0;
		ElementT mindist=d.cell(0);
		for (int j=1; j<k; j++) {
			if (d.cell(j) < mindist) {
				minindex=j;
				mindist = d.cell(j);
			}
		}
    anew = minindex;
    changed = (oldindex!=minindex);
	}
	
	cflag from (ctemp c) {
		int i;
		ElementT sum=0;
		for (i=0; i<n; i++) {
			sum+=c.cell(i);
		}
		return sum;
	}

}


#endif // ASSIGNCLUSTERS_PBCC
