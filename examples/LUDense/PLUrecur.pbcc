#ifndef PLURECUR_PBCC
#define PLURECUR_PBCC

#include "PLUblockdecomp.pbcc"
#include "PLU.pbcc"


transform PLUrecurinner
from IN[n,n], Pin[n]
to OUT[n,n], Pout[n]
{

  to (OUT out, Pout pout) from (IN in, Pin pin)
  {
        if (n < 2) {
                PLUnoblock(out, pout, in, pin);
        }
        else {
                PLUblock2(out, pout, in, pin);
        }
  }



  to (OUT out, Pout pout) from (IN in, Pin pin)
  {
        if (n < 3) {
                PLUnoblock(out, pout, in, pin);
        }
        else {
                PLUblock3(out, pout, in, pin);
        }
  }

  to (OUT out, Pout pout) from (IN in, Pin pin)
  {
        if (n < 4) {
                PLUnoblock(out, pout, in, pin);
        }
        else {
                PLUblock4(out, pout, in, pin);
        }
  }


  to (OUT out, Pout pout) from (IN in, Pin pin)
  {
	PLUnoblock(out,pout,in,pin);
  }

}


transform PLUrecur
from IN[n,n]
through Pinitial[n]
to OUT[n,n], Pout[n]
{  
  Pinitial.cell(j) from () { return j;}

  to (OUT out, Pout pout) from (IN in, Pinitial pin)
  {
	PLUrecurinner(out,pout,in,pin);
  }
}

#endif // PLURECUR_PBCC
