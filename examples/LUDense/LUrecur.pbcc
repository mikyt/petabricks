#ifndef LURECUR_PBCC
#define LURECUR_PBCC

#include "LUupper.pbcc"
#include "LUlower.pbcc"
#include "LUnopivot.pbcc"
#include "../multiply/multiply.pbcc"
#include "../simple/add.pbcc"

transform LUblock
from IN[n, n]
to OUT[n, n]
{
  //get LU of upper left block by recursion
  to (OUT.region(0,0,n/2,n/2) out)
  from (IN.region(0,0,n/2,n/2) in)
  {
    LUrecur(out,in);
  }

  //upper right block
  to (OUT.region(n/2,0,n,n/2) out)
  from (IN.region(n/2,0,n,n/2) in,
	OUT.region(0,0,n/2,n/2) leftdiag)
  {
    LUuppertrirecur(out,in,leftdiag);
  }
  

  //lower left block
  to (OUT.region(0,n/2,n/2,n) out)
  from (IN.region(0,n/2,n/2,n) in,
        OUT.region(0,0,n/2,n/2) updiag)

  {
    LUlowertrirecur(out,in,updiag);
  }

  //lower right block
  to (OUT.region(n/2,n/2,n,n) out)
  from (IN.region(n/2,n/2,n,n) in,
        OUT.region(n/2,0,n,n/2) up,
        OUT.region(0,n/2,n/2,n) left)
  {
	//temp = in - left*up (this updates the lower right block
        MatrixRegion2D temp = MatrixRegion2D::allocate(n-n/2, n-n/2);
        MatrixMultiply(out,left,up);
        MatrixSub(temp,in,out);

	//recursion to get LU of the remaining updated block
        LUrecur(out,temp);
  }


}


transform LUrecur
from IN[n,n]
to OUT[n,n]
{

  to (OUT out) from (IN in)
  {
#ifdef DEBUG
        fprintf(stderr, "LUrecur called for size %d\n", n);
#endif
	if (n == 1) {
		out.cell(0,0)=in.cell(0,0);
	}
	else {
		LUblock(out,in);
	}
  }


  to (OUT out) from (IN in)
  {
	LUnopivot(out,in);
  }


}

#endif // LURECUR_PBCC
