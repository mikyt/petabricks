#ifndef LU_PBCC
#define LU_PBCC

#include "../simple/macros.h"
#include "../simple/copy.pbcc"
#include "../simple/permute.pbcc"
#include "../simple/reduce.pbcc"
#include "../simple/scale.pbcc"
#include "../trisolve/TriSolveLL.pbcc"
#include "../multiply/multiplyAdd.pbcc"
#include "DGER.pbcc"
#include "LULAPACK.pbcc"

transform Shift1D
from OFFSET
to A[n]
{
    to (A.cell(i) a) from (OFFSET offset)
    {
        a += offset;
    }
}

transform LUGenerator
to OUT[n,n]
{
    to (OUT.cell(j, i) out)
    from ()
    {
        out = PetabricksRuntime::randNormal(0, 1);
    }
}

transform LUBase
to A[n,m], P[m]
{
    // right looking (update trailing matrix after each column is solved)
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUBaseRight called for (%d, %d)\n", m, n);
#endif

        IndexT j;
        ElementT iMax, jMax, valMax;

        // for each column in square part of matrix
        for (j = 0; j < MIN(m, n); ++j) {
            if (j == m - 1) {
                p.cell(j) = j;
            } else {
                // find the largest value in jth column on/below diagonal
                ReduceAMax2D(jMax, iMax, valMax, a.region(j, j, j+1, m));
                iMax += j;

                // save swapped row index in p
                p.cell(j) = iMax;

                // swap pivot row into current row
                if (iMax != j) {
                    Swap2D(a.region(0, j   , n, j    + 1),
                           a.region(0, iMax, n, iMax + 1));
                }

                // scale current column and update trailing submatrix
                Scale2D(a.region(j, j+1, j+1, m), 1.0 / a.cell(j, j));

                if (j < n - 1) {
                    // rank 1 trailing matrix update
                    DGER(a.region(j+1, j+1, n  , m  ), -1.0,
                         a.region(j  , j+1, j+1, m  ),
                         a.region(j+1, j  , n  , j+1));
                }
            }
        }

        // no swaps for rest of array
        for (j = MIN(m,n); j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // left looking (solve one column at a time)
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUBaseLeft called for (%d, %d)\n", m, n);
#endif

        IndexT j;
        ElementT iMax, jMax, valMax;

        for (j = 0; j < MIN(m,n); ++j) {

            // lazy update of all values in current column
            if (j > 0) {
                // update values above diagonal
                TriSolveLLInPlace(a.region(j, 0, j+1, j), 1,
                                  a.region(0, 0, j  , j));

                // update values on and below diagonal
                MatrixMultiplyAdd(a.region(j, j, j+1, m), -1.0,
                                  a.region(0, j, j  , m),
                                  a.region(j, 0, j+1, j), 1.0);
            }

            if (j == m - 1) {
                p.cell(j) = j;
            } else {
                // find the largest value in jth column
                ReduceAMax2D(jMax, iMax, valMax, a.region(j, j, j+1, m));
                iMax += j;

                // save swapped row index in p
                p.cell(j) = iMax;

                // swap pivot row into current row
                if (iMax != j) {
                    Swap2D(a.region(0, j   , n, j    + 1),
                           a.region(0, iMax, n, iMax + 1));
                }

                // scale values below diagonal
                Scale2D(a.region(j, j+1, j+1, m), 1.0 / a.cell(j, j));
            }
        }

        // solve for remainder of U matrix
        if (n > m) {
            TriSolveLLInPlace(a.region(m, 0, n, m), 1,
                              a.region(0, 0, m, m));
        }

        // no swaps for rest of array
        for (j = MIN(m,n); j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // Crout (solve one column and row at a time)
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUBaseCrout called for (%d, %d)\n", m, n);
#endif

        IndexT j;
        ElementT iMax, jMax, valMax;

        for (j = 0; j < MIN(m,n); ++j) {

            // lazy update of current column
            if (j > 0) {
                // update values on and below diagonal
                MatrixMultiplyAdd(a.region(j, j, j+1, m), -1.0,
                                  a.region(0, j, j  , m),
                                  a.region(j, 0, j+1, j), 1.0);
            }

            if (j == m - 1) {
                p.cell(j) = j;
            } else {
                // find the largest value in jth column
                ReduceAMax2D(jMax, iMax, valMax, a.region(j, j, j+1, m));
                iMax += j;

                // save swapped row index in p
                p.cell(j) = iMax;

                // swap pivot row into current row
                if (iMax != j) {
                    Swap2D(a.region(0, j   , n, j    + 1),
                           a.region(0, iMax, n, iMax + 1));
                }

                // scale values below diagonal
                Scale2D(a.region(j, j+1, j+1, m), 1.0 / a.cell(j, j));
            }

            // lazy update of current row
            if (j > 0 && j < n) {
                MatrixMultiplyAdd(a.region(j+1, j, n, j+1), -1.0,
                                  a.region(0  , j, j, j+1),
                                  a.region(j+1, 0, n, j  ), 1.0);
            }
        }

        // no swaps for rest of array
        for (j = MIN(m,n); j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // right looking serial
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUSerialRight called for (%d, %d)\n", m, n);
#endif

        IndexT i, j, k, ip;
        ElementT maxVal, temp;
        for (j = 0; j < MIN(m,n); ++j) {
            // find pivot
            ip = j; maxVal = fabs(a.cell(j, j));
            for (i = j+1; i < m; ++i) {
                if (fabs(a.cell(j, i)) > maxVal) {
                    maxVal = fabs(a.cell(j, i));
                    ip = i;
                }
            }
            p.cell(j) = ip;
            // swap rows
            if (ip != j) {
                for (k = 0; k < n; ++k) {
                    temp = a.cell(k, j);
                    a.cell(k, j) = a.cell(k, ip);
                    a.cell(k, ip) = temp;
                }
            }
            // scale column below diagonal
            temp = 1.0 / a.cell(j, j);
            for (i = j+1; i < m; ++i) {
                a.cell(j, i) *= temp;
            }
            // update trailing matrix
            for (i = j+1; i < m; ++i) {
                for (k = j+1; k < n; ++k) {
                    a.cell(k, i) -= a.cell(j, i) * a.cell(k, j);
                }
            }
        }

        // no swaps for rest of array
        for (j = MIN(m,n); j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // left looking serial
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUSerialLeft called for (%d, %d)\n", m, n);
#endif

        IndexT i, j, k, ip;
        ElementT maxVal, temp;
        for (j = 0; j < n; ++j) {
            // update values in current column
            for (i = 0; i < m; ++i) {
                for (k = 0; k < MIN(i, j); ++k) {
                    a.cell(j, i) -= a.cell(k, i) * a.cell(j, k);
                }
            }
            if (j < m) {
                // find pivot
                ip = j; maxVal = fabs(a.cell(j, j));
                for (i = j+1; i < m; ++i) {
                    if (fabs(a.cell(j, i)) > maxVal) {
                        maxVal = fabs(a.cell(j, i));
                        ip = i;
                    }
                }
                p.cell(j) = ip;
                // swap rows
                if (ip != j) {
                    for (k = 0; k < n; ++k) {
                        temp = a.cell(k, j);
                        a.cell(k, j) = a.cell(k, ip);
                        a.cell(k, ip) = temp;
                    }
                }
                // scale column below diagonal
                temp = 1.0 / a.cell(j, j);
                for (i = j+1; i < m; ++i) {
                    a.cell(j, i) *= temp;
                }
            }
        }

        // no swaps for rest of array
        for (j = n; j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // Crout serial
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUSerialCrout called for (%d, %d)\n", m, n);
#endif

        IndexT i, j, k, ip;
        ElementT maxVal, temp;
        for (j = 0; j < MIN(m, n); ++j) {
            // update values in current column
            for (i = j; i < m; ++i) {
                for (k = 0; k < j; ++k) {
                    a.cell(j, i) -= a.cell(k, i) * a.cell(j, k);
                }
            }
            // find pivot
            ip = j; maxVal = fabs(a.cell(j, j));
            for (i = j+1; i < m; ++i) {
                if (fabs(a.cell(j, i)) > maxVal) {
                    maxVal = fabs(a.cell(j, i));
                    ip = i;
                }
            }
            p.cell(j) = ip;
            // swap rows
            if (ip != j) {
                for (k = 0; k < n; ++k) {
                    temp = a.cell(k, j);
                    a.cell(k, j) = a.cell(k, ip);
                    a.cell(k, ip) = temp;
                }
            }
            // scale column below diagonal
            temp = 1.0 / a.cell(j, j);
            for (i = j+1; i < m; ++i) {
                a.cell(j, i) *= temp;
            }
            // update values in current row
            for (i = 0; i < j; ++i) {
                for (k = j+1; k < n; ++k) {
                    a.cell(k, j) -= a.cell(i, j) * a.cell(k, i);
                }
            }
        }

        // no swaps for rest of array
        for (j = n; j < m; ++j) {
            p.cell(j) = j;
        }
    }

    // call LAPACK
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUBaseLAPACK called for (%d, %d)\n", m, n);
#endif

        LULAPACK(a, p, a);
    }
}

// right looking (update trailing matrix each iteration)
transform LUBlockedRight
to A[n,m], P[m]
tunable sizespecific blockSize
{
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LUBlockedRight called for (%d, %d), b = %d\n",
                m, n, (int) blockSize);
#endif

        // base case
        if (blockSize < 1 || blockSize >= MIN(m,n)) {
            LUBase(a, p);
            return;
        }

        IndexT b = blockSize;
        MatrixRegion2D a1, a2, a11, a12, a21, a22;
        MatrixRegion1D p2;

        a1  = a.region(0, 0, b, m);
        a2  = a.region(b, 0, n, m);

        a11 = a.region(0, 0, b, b);
        a12 = a.region(b, 0, n, b);
        a21 = a.region(0, b, b, m);
        a22 = a.region(b, b, n, m);

        p2  = p.region(b, m);

        // compute LU of left block
        LUBase(a1, p);

        // swap rows in right block
        PermuteInPlace(a2, p, 0, b);

        // upper right block
        TriSolveLLInPlace(a12, 1, a11);

        // update lower right block
        MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);

        // recursively compute LU of the updated lower right block
        LUBlocked(a22, p2);

        // swap rows in lower left block
        PermuteInPlace(a21, p2, 0, m - b);

        // adjust permutation values to larger matrix
        Shift1D(p2, b);
    }
}

// left looking (process one column block at a time)
transform LUBlockedLeft
from K
to A[n,m], P[m]
tunable sizespecific blockSize
{
    to (A a, P p) from (K _k)
    {
#ifdef DEBUG
        fprintf(stderr, "LUBlockedLeft called for (%d, %d), b = %d\n",
                m, n, (int) blockSize);
#endif

        IndexT k, i0, i1;
        MatrixRegion2D ac2, a11, a12, a21, a22, a23;
        MatrixRegion1D p2;

        // make sure k is valid
        k = MAX(_k, 1);
        k = MIN(k, MIN(m,n));

        // base case
        if (blockSize < 1 || blockSize >= k) {
            LUBase(a, p);
            return;
        }

        for (i0 = 0; i0 < k; i0 += blockSize) {

            i1  = MIN(i0 + blockSize, k);
            a22 = a.region(i0, i0, i1, m);
            p2  = p.region(i0, m);

            // lazy update of all values in current column
            if (i0 > 0) {

                ac2 = a.region(i0, 0 , i1, m );
                a11 = a.region(0 , 0 , i0, i0);
                a12 = a.region(i0, 0 , i1, i0);
                a21 = a.region(0 , i0, i0, m );

                // apply permutations from previous blocks
                PermuteInPlace(ac2, p, 0, i0);

                // update values above diagonal
                TriSolveLLInPlace(a12, 1, a11);

                // update values on and below diagonal
                MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);
            }

            // compute LU of lower column block
            LUBase(a22, p2);

            // permute rows to left of lower column block
            if (i0 > 0) {
                PermuteInPlace(a21, p2, 0, i1 - i0);
            }

            // adjust permutation values to larger matrix
            Shift1D(p2, i0);
        }

        // permute trailing matrix and solve for upper right portion
        if (k < n) {
            PermuteInPlace(a.region(k, 0, n, m), p, 0, k);
            TriSolveLLInPlace(a.region(k, 0, n, k), 1,
                              a.region(0, 0, k, k));
        }

        // if more work to do, update lower right trailing matrix and recurse
        if (k < MIN(m,n)) {
            a21 = a.region(0, k, k, m);
            a12 = a.region(k, 0, n, k);
            a22 = a.region(k, k, n, m);
            p2  = p.region(k, m);

            // update lower right block
            MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);

            // recursively compute LU of the updated lower right block
            LUBlocked(a22, p2);

            // swap rows in lower left block
            PermuteInPlace(a21, p2, 0, m - k);

            // adjust permutation values to larger matrix
            Shift1D(p2, k);
        }
    }
}

// Crout (process one column/row block at a time)
transform LUBlockedCrout
from K
to A[n,m], P[m]
tunable sizespecific blockSize
{
    to (A a, P p) from (K _k)
    {
#ifdef DEBUG
        fprintf(stderr, "LUBlockedCrout called for (%d, %d), b = %d\n",
                m, n, (int) blockSize);
#endif

        IndexT k, i0, i1;
        MatrixRegion2D a11, a12, a13, a21, a22, a23, ar1, ar2, ar3;
        MatrixRegion1D p2;

        // make sure k is valid
        k = MAX(_k, 1);
        k = MIN(k, MIN(m,n));

        // base case
        if (blockSize < 1 || blockSize >= k) {
            LUBase(a, p);
            return;
        }

        for (i0 = 0; i0 < k; i0 += blockSize) {

            i1 = MIN(i0 + blockSize, k);
            a12 = a.region(i0, 0,  i1, i0);
            a13 = a.region(i1, 0,  n , i0);
            ar1 = a.region(0 , i0, i0, i1);
            ar2 = a.region(i0, i0, i1, i1);
            ar3 = a.region(i1, i0, n , i1);
            a21 = a.region(0 , i0, i0, m );
            a22 = a.region(i0, i0, i1, m );
            a23 = a.region(i1, i0, n , m );

            p2  = p.region(i0, m);

            // lazy update of current column block
            if (i0 > 0) {
                MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);
            }

            // compute LU of lower column block
            LUBase(a22, p2);

            // permute rows to left and right of lower column block
            if (i0 > 0) {
                PermuteInPlace(a21, p2, 0, i1 - i0);
            }
            if (i1 < n) {
                PermuteInPlace(a23, p2, 0, i1 - i0);
            }

            // adjust permutation values to larger matrix
            Shift1D(p2, i0);

            // lazy update of current row block
            if (i1 < n) {
                if (i0 > 0) {
                    MatrixMultiplyAdd(ar3, -1.0, ar1, a13, 1.0);
                }
                TriSolveLLInPlace(ar3, 1, ar2);
            }
        }

        // if more work to do, update trailing matrix and recurse
        if (k < MIN(m,n)) {
            a21 = a.region(0, k, k, m);
            a12 = a.region(k, 0, n, k);
            a22 = a.region(k, k, n, m);
            p2  = p.region(k, m);

            // update lower right block
            MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);

            // recursively compute LU of the updated lower right block
            LUBlocked(a22, p2);

            // swap rows in lower left block
            PermuteInPlace(a21, p2, 0, m - k);

            // adjust permutation values to larger matrix
            Shift1D(p2, k);
        }
    }
}

transform LUBlocked
to A[n,m], P[m]
{
    // right-looking recursive
    to (A a, P p) from ()
    {
        LUBlockedRight(a, p);
    }

    // left-looking non-recursive
    to (A a, P p) from ()
    {
        LUBlockedLeft(a, p, MIN(m,n));
    }

    // left-looking recursive
    to (A a, P p) from ()
    {
        LUBlockedLeft(a, p, MIN(m,n) / 2);
    }

    // Crout non-recursive
    to (A a, P p) from ()
    {
        LUBlockedCrout(a, p, MIN(m,n));
    }

    // Crout recursive
    to (A a, P p) from ()
    {
        LUBlockedCrout(a, p, MIN(m,n) / 2);
    }
}

// recursively split matrix into quadrants
transform LURecursive
to A[n,m], P[m]
tunable sizespecific blockSize
{
    to (A a, P p) from ()
    {
#ifdef DEBUG
        fprintf(stderr, "LURecursive called for (%d, %d), b = %d\n",
                m, n, (int) blockSize);
#endif

        // base case
        if (blockSize < 1 || blockSize >= MIN(m,n)) {
            LUBlocked(a, p);
            return;
        }

        IndexT b = n / 2;
        MatrixRegion2D a1, a2, a11, a12, a21, a22;
        MatrixRegion1D p2;

        a1  = a.region(0, 0, b, m);
        a2  = a.region(b, 0, n, m);

        if (b < m) {
            a11 = a.region(0, 0, b, b);
            a12 = a.region(b, 0, n, b);
            a21 = a.region(0, b, b, m);
            a22 = a.region(b, b, n, m);
        } else {
            a11 = a.region(0, 0, m, m);
            a12 = a.region(m, 0, n, m);
        }

        p2  = p.region(b, m);

        // compute LU of left block
        LURecursive(a1, p);

        // swap rows in right block
        PermuteInPlace(a2, p, 0, b);

        // upper right block
        TriSolveLLInPlace(a12, 1, a11);

        if (b < m) {
            // update lower right block
            MatrixMultiplyAdd(a22, -1.0, a21, a12, 1.0);

            // recursively compute LU of the updated lower right block
            LURecursive(a22, p2);

            // swap rows in lower left block
            PermuteInPlace(a21, p2, 0, m - b);

            // adjust permutation values to larger matrix
            Shift1D(p2, b);
        }
    }
}

transform LUInPlace
to A[n,m], P[m]
{
    to (A a, P p) from ()
    {
        LURecursive(a, p);
    }

    to (A a, P p) from ()
    {
        LUBlocked(a, p);
    }

    to (A a, P p) from ()
    {
        LUBase(a, p);
    }
}

transform LU
from IN[n,m]
to OUT[n,m], P[m]
generator LUGenerator
{
    to (OUT out, P p) from (IN in)
    {
        Copy2D(out, in);
        LUInPlace(out, p);
    }
}

#endif // LU_PBCC
