#ifndef LULOWER_PBCC
#define LULOWER_PBCC

#include "../trisolve/TriSolveRU.pbcc"
#include "../multiply/multiply.pbcc"
#include "../simple/add.pbcc"

transform LUlowertri
from IN[n,m], UPDIAG[n,n]
to OUT[n,m]
{

  //upper left
  to (OUT.region(0,0,n/2,m/2) out)
  from (IN.region(0,0,n/2,m/2) in, UPDIAG.region(0,0,n/2,n/2) updiag)
  {
        LUlowertrirecur(out,in,updiag);
  }

  //lower left
  to (OUT.region(0,m/2,n/2,m) out)
  from (IN.region(0,m/2,n/2,m) in, UPDIAG.region(0,0,n/2,n/2) updiag)
  {
        LUlowertrirecur(out,in,updiag);
  }

  //upper right
  to (OUT.region(n/2,0,n,m/2) out)
  from (IN.region(n/2,0,n,m/2) in, 
	UPDIAG.region(n/2,0,n,n/2) up,
	OUT.region(0,0,n/2,m/2) left,
	UPDIAG.region(n/2,n/2,n,n) diag)
  {
	MatrixRegion2D temp = MatrixRegion2D::allocate(n-n/2,m/2);
        MatrixMultiply(temp, left, up);
        MatrixSub(temp, in, temp);

        LUlowertrirecur(out,temp,diag);
  }

  //lower right
  to (OUT.region(n/2,m/2,n,m) out)
  from (IN.region(n/2,m/2,n,m) in,
        UPDIAG.region(n/2,0,n,n/2) up,
        OUT.region(0,m/2,n/2,m) left,
        UPDIAG.region(n/2,n/2,n,n) diag)
  {
        MatrixRegion2D temp = MatrixRegion2D::allocate(n-n/2, m-m/2);
        MatrixMultiply(temp, left, up);
        MatrixSub(temp, in, temp);

        LUlowertrirecur(out,temp,diag);    
  }


}

transform LUlowertrirecur
from IN[n,m], UPDIAG[n,n]
to OUT[n,m]
{

  to (OUT out) from (IN in, UPDIAG updiag)
  {
#ifdef DEBUG
        fprintf(stderr, "LUlowertri called for size (%d, %d)\n", m, n);
#endif
	if (m==1 || n==1){
		TriSolveRU(out, 0, updiag, in);
	}
	else {
		LUlowertri(out, in, updiag);
	}
  }

  to (OUT out)
  from (IN in, UPDIAG updiag)
  {
#ifdef DEBUG
        fprintf(stderr, "LUlowertri called for size (%d, %d)\n", m, n);
#endif
        TriSolveRU(out, 0, updiag, in);
  }

}


#endif // LULOWER_PBCC
