#ifndef PLUBLOCKDECOMP_PBCC
#define PLUBLOCKDECOMP_PBCC

#include "../trisolve/TriSolveLL.pbcc"
#include "PLU.pbcc"
#include "LAPACKmatmul.pbcc"

transform SwapElements
from IN[n], P[n]
to OUT[n]
{
  to (OUT out) from (IN in, P p)
  {
        for (int j=0; j<n; j++)
        {
		if (p.cell(j) >= 0 && p.cell(j) < n) {
                	out.cell(j)=in.cell(p.cell(j));
		}
		else {
			out.cell(j)=in.cell(j);
		}
        }
  }
}

transform SwapRows
from IN[n,m], P[m]
to OUT[n,m]
{
  to (OUT out) from (IN in, P p)
  {
	for (int j=0; j<m; j++)
	{
		if (p.cell(j) >= 0 && p.cell(j) < m) {
			Copy1D(out.row(j), in.row(p.cell(j)));
		}
		else {
			Copy1D(out.row(j),in.row(j));
		}
	}
  }
}

transform PLUblock2
from IN[n, n], Pin[n]
through TEMP[n, n], Ptemp[n], Phalf[n-n/2]
to OUT[n, n], Pout[n]
{
  //get LU of left block by recursion
  to (TEMP.region(0,0,n/2,n) temp, Ptemp ptemp)
  from (IN.region(0,0,n/2,n) in, Pin pin)
  {
        PLUnoblock(temp,ptemp,in, pin);
  }

  //upper left block is final
  to (OUT.region(0,0,n/2,n/2) out) from (TEMP.region(0,0,n/2,n/2) temp)
  {
	Copy2D(out, temp);
  }

  //first half of Permutation vector is final
  to (Pout.region(0,n/2) pout) from (Ptemp.region(0,n/2) ptemp)
  {
	Copy1D(pout, ptemp);
  }

  //swap right block
  to (TEMP.region(n/2,0,n,n) temp)
  from (IN.region(n/2,0,n,n) in, Ptemp ptemp)
  {
        SwapRows(temp, in, ptemp);
  }

  //upper right block
  to (OUT.region(n/2,0,n,n/2) out)
  from (TEMP.region(n/2,0,n,n/2) swappedin,
	TEMP.region(0,0,n/2,n/2) leftdiag)
  {
	TriSolveLL(out,1,leftdiag,swappedin);
  }
  

  //lower right block
  to (OUT.region(n/2,n/2,n,n) out, Phalf phalf)
  from (TEMP.region(n/2,n/2,n,n) in,
        OUT.region(n/2,0,n,n/2) up,
        TEMP.region(0,n/2,n/2,n) left)
  {
	//Atemp = in - left*up (this updates the lower right block)
        MatrixRegion2D Atemp = MatrixRegion2D::allocate(n-n/2, n-n/2);
        //MatrixMultiply(out,left,up);
        //MatrixSub(Atemp,in,out);

        // TODO: this is blocked, but not tuned or parallel
	LAPACKmatmul(Atemp,left,up,in);

	//recursion to get LU of the remaining updated block
        PLUrecur(out,phalf,Atemp);
  }

  //lower left block
  to (OUT.region(0,n/2,n/2,n) out)
  from (TEMP.region(0,n/2,n/2,n) temp,  Phalf phalf)

  {
        SwapRows(out,temp,phalf);
  }

  //last half of Permutation vector
  to (Pout.region(n/2,n) pout) from (Ptemp.region(n/2,n) ptemp, Phalf phalf)
  {
	SwapElements(pout, ptemp, phalf);
  }

}


transform PLUblock3
from IN[n, n], Pin[n]
through TEMP[n, n], Ptemp[n], Phalf[n-n/3]
to OUT[n, n], Pout[n]
{
  //get LU of left block by recursion
  to (TEMP.region(0,0,n/3,n) temp, Ptemp ptemp)
  from (IN.region(0,0,n/3,n) in, Pin pin)
  {
        PLUnoblock(temp,ptemp,in, pin);
  }

  //upper left block is final
  to (OUT.region(0,0,n/3,n/3) out) from (TEMP.region(0,0,n/3,n/3) temp)
  {
        Copy2D(out, temp);
  }

  //first half of Permutation vector is final
  to (Pout.region(0,n/3) pout) from (Ptemp.region(0,n/3) ptemp)
  {
        Copy1D(pout, ptemp);
  }

  //swap right block
  to (TEMP.region(n/3,0,n,n) temp)
  from (IN.region(n/3,0,n,n) in, Ptemp ptemp)
  {
        SwapRows(temp, in, ptemp);
  }

  //upper right block
  to (OUT.region(n/3,0,n,n/3) out)
  from (TEMP.region(n/3,0,n,n/3) swappedin,
        TEMP.region(0,0,n/3,n/3) leftdiag)
  {
	TriSolveLL(out,1,leftdiag,swappedin);
  }


  //lower right block
  to (OUT.region(n/3,n/3,n,n) out, Phalf phalf)
  from (TEMP.region(n/3,n/3,n,n) in,
        OUT.region(n/3,0,n,n/3) up,
        TEMP.region(0,n/3,n/3,n) left)
  {
        //Atemp = in - left*up (this updates the lower right block)
        MatrixRegion2D Atemp = MatrixRegion2D::allocate(n-n/3, n-n/3);
        //MatrixMultiply(out,left,up);
        //MatrixSub(Atemp,in,out);

	LAPACKmatmul(Atemp,left,up,in);

        //recursion to get LU of the remaining updated block
        PLUrecur(out,phalf,Atemp);
  }

  //lower left block
  to (OUT.region(0,n/3,n/3,n) out)
  from (TEMP.region(0,n/3,n/3,n) temp,  Phalf phalf)

  {
        SwapRows(out,temp,phalf);
  }

  //last half of Permutation vector
  to (Pout.region(n/3,n) pout) from (Ptemp.region(n/3,n) ptemp, Phalf phalf)
  {
        SwapElements(pout, ptemp, phalf);
  }

}

transform PLUblock4
from IN[n, n], Pin[n]
through TEMP[n, n], Ptemp[n], Phalf[n-n/4]
to OUT[n, n], Pout[n]
{
  //get LU of left block by recursion
  to (TEMP.region(0,0,n/4,n) temp, Ptemp ptemp)
  from (IN.region(0,0,n/4,n) in, Pin pin)
  {
        PLUnoblock(temp,ptemp,in, pin);
  }

  //upper left block is final
  to (OUT.region(0,0,n/4,n/4) out) from (TEMP.region(0,0,n/4,n/4) temp)
  {
        Copy2D(out, temp);
  }

  //first half of Permutation vector is final
  to (Pout.region(0,n/4) pout) from (Ptemp.region(0,n/4) ptemp)
  {
        Copy1D(pout, ptemp);
  }

  //swap right block
  to (TEMP.region(n/4,0,n,n) temp)
  from (IN.region(n/4,0,n,n) in, Ptemp ptemp)
  {
        SwapRows(temp, in, ptemp);
  }

  //upper right block
  to (OUT.region(n/4,0,n,n/4) out)
  from (TEMP.region(n/4,0,n,n/4) swappedin,
        TEMP.region(0,0,n/4,n/4) leftdiag)
  {
	TriSolveLL(out,1,leftdiag,swappedin);
  }

  //lower right block
  to (OUT.region(n/4,n/4,n,n) out, Phalf phalf)
  from (TEMP.region(n/4,n/4,n,n) in,
        OUT.region(n/4,0,n,n/4) up,
        TEMP.region(0,n/4,n/4,n) left)
  {
        //Atemp = in - left*up (this updates the lower right block)
        MatrixRegion2D Atemp = MatrixRegion2D::allocate(n-n/4, n-n/4);
        //MatrixMultiply(out,left,up);
        //MatrixSub(Atemp,in,out);

	LAPACKmatmul(Atemp,left,up,in);

        //recursion to get LU of the remaining updated block
        PLUrecur(out,phalf,Atemp);
  }

  //lower left block
  to (OUT.region(0,n/4,n/4,n) out)
  from (TEMP.region(0,n/4,n/4,n) temp,  Phalf phalf)

  {
        SwapRows(out,temp,phalf);
  }

  //last half of Permutation vector
  to (Pout.region(n/4,n) pout) from (Ptemp.region(n/4,n) ptemp, Phalf phalf)
  {
        SwapElements(pout, ptemp, phalf);
  }

}


#endif // PLUBLOCKDECOMP_PBCC
