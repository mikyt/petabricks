#ifndef LUUPPER_PBCC
#define LUUPPER_PBCC

#include "../trisolve/TriSolveLL.pbcc"
#include "../multiply/multiply.pbcc"
#include "../simple/add.pbcc"


transform LUuppertri
from IN[m,n], LEFTDIAG[n,n]
to OUT[m,n]
{

  //upper left
  to (OUT.region(0,0,m/2,n/2) out)
  from (IN.region(0,0,m/2,n/2) in, LEFTDIAG.region(0,0,n/2,n/2) leftdiag)
  {
        LUuppertrirecur(out,in,leftdiag);
  }

  //upper right
  to (OUT.region(m/2,0,m,n/2) out) 
  from (IN.region(m/2,0,m,n/2) in, LEFTDIAG.region(0,0,n/2,n/2) leftdiag)
  {
        LUuppertrirecur(out,in,leftdiag);
  }

  //lower left
  to (OUT.region(0,n/2,m/2,n) out)
  from (IN.region(0,n/2,m/2,n) in, 
	LEFTDIAG.region(0,n/2,n/2,n) left,
	OUT.region(0,0,m/2,n/2) up,
	LEFTDIAG.region(n/2,n/2,n,n) diag)
  {
      MatrixRegion2D temp = MatrixRegion2D::allocate(m/2, n-n/2);
      MatrixMultiply(temp, left, up);
      MatrixSub(temp, in, temp);

      LUuppertrirecur(out,temp,diag);
  }



  //lower right
  to (OUT.region(m/2,n/2,m,n) out)
  from (IN.region(m/2,n/2,m,n) in,
        LEFTDIAG.region(0,n/2,n/2,n) left,
        OUT.region(m/2,0,m,n/2) up,
        LEFTDIAG.region(n/2,n/2,n,n) diag)
  {
      MatrixRegion2D temp = MatrixRegion2D::allocate(m-m/2, n-n/2);
      MatrixMultiply(temp, left, up);
      MatrixSub(temp, in, temp);

      LUuppertrirecur(out,temp,diag);    
  }


}

transform LUuppertrirecur
from IN[m,n], LEFTDIAG[n,n]
to OUT[m,n]
{
  to (OUT out) from (IN in, LEFTDIAG leftdiag)
  {
#ifdef DEBUG
    fprintf(stderr, "LUuppertri called for size (%d, %d)\n", m, n);
#endif
    if (m==1 || n==1){
            TriSolveLL(out, 1, leftdiag, in);
    }
    else {
      LUuppertri(out, in, leftdiag);
    }
  }


  to (OUT out)
  from (IN in, LEFTDIAG leftdiag)
  {
#ifdef DEBUG
        fprintf(stderr, "LUuppertri called for size (%d, %d)\n", m, n);
#endif
        TriSolveLL(out, 1, leftdiag, in);
  }


}


#endif // LUUPPER_PBCC
