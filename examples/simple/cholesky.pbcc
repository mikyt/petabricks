#ifndef CHOLESKY_PBCC
#define CHOLESKY_PBCC
#include "../multiply/multiply.pbcc"
#include "copy.pbcc"
#include "transpose.pbcc"
#include "../trisolve/TriSolveRU.pbcc"


transform utri_zero
from IN[n, n]
to OUT[n, n]
{
    to   (OUT.cell(j, i) out)
    from ( IN.cell(j, i) in)
    {
        if (i < j) {
            out = 0;
        } else {
            out = in;
        }
    }
}

transform HermitianGenerate 
to H[n,n] {
	  
	  // this generates a real, symmetric, positive definite matrix
	  
	  to(H her)
	  from () { 
	    
	    MatrixRegion2D temp1 = MatrixRegion2D::allocate(n,n);
	    MatrixRegion2D temp2 = MatrixRegion2D::allocate(n,n);
	    
	    int i;
	    for (i = 0; i < temp1.width(); i++) {
             	 for (int j = 0; j <= i; j++) {
		      	   temp1.cell(i,j) = PetabricksRuntime::randInt(1,20);
		}
	    }

  	    for (i = 0; i < temp1.width(); i++) {
	    	for (int j = 0; j < i; j ++ ) {
   		    temp1.cell(j,i) = temp1.cell(i,j);
   		 }
	    }

	   
	   Copy2D(temp2, temp1);
	   MatrixMultiply (her, temp1, temp2);

	  }

}

transform MatrixCholesky
from A[n,n]
to L[n,n]
generator HermitianGenerate
{

	// recursive def of cholesky
	to (L l)
	from (A a) {
	     int size = 4;
	     
	     // base case
	     if (n < size + 1) {
	     	// do something not recursive
 	      	for (int i = 0; i < a.height(); i++) {
             	     for (int j = 0; j < (i+1); j++) {
            	      	 double s = 0;
            	     	 if (j != i) 
			    l.cell(i,j) = 0;
			 for (int k = 0; k < j; k++)
                     	     s += l.cell(k,i) * l.cell(k,j);
            	     	 l.cell(j, i) = (i == j) ?
                            sqrt(a.cell(i, i) - s) :
                            (1.0 / l.cell(j, j) * (a.cell(j, i) - s));
        	     }
	     	}	
	     } else {
	       int new_n = n - size;
	       	       
	       MatrixRegion2D L11 = l.region(0, 0, new_n, new_n);
	       MatrixRegion2D L21 = l.region(0, new_n, new_n, n);
	       MatrixRegion2D L22 = l.region(new_n, new_n, n, n);
	       ConstMatrixRegion2D A11 = a.region(0, 0, new_n, new_n);
	       ConstMatrixRegion2D A21 = a.region(0, new_n, new_n, n);
	       ConstMatrixRegion2D A22 = a.region(new_n, new_n, n, n);

	       // upper left corner
	       MatrixCholesky(L11, A11);

	       // lower left corner
	       TriSolveRU(L21, 0, L11.transposed(), A21);
	       
	       //lower right corner
	       MatrixRegion2D temp1 = MatrixRegion2D::allocate(size,size);
	       MatrixRegion2D temp2 = MatrixRegion2D::allocate(size,size);
	       MatrixMultiply(temp1, L21, L21.transposed());
	       Subtract2D(temp2, A22, temp1);
	       MatrixCholesky(L22, temp2); 

	       //set all the upper triangular values to zero
	       utri_zero(l, l);


	    }
	}	
/*
	// specific case: first column
	to (L.cell(x,y) l) 
	from (L.cell(0,0) c, 
	A.cell(x,y) a) 
	where x = 0 
	{
	     l = (x == y) ?
	       sqrt(a) :
               (1.0 / c * a);
	}

	// implementation that uses region from (0,0) to the box adjacent to the right of the entry
	to (L.cell(x,y) l) 
	from (L.region(0, 0, x, y + 1) r,
	L.region(0,0, x+1, y) r2,
	A.cell(x,y) a) 
	where x > 0 
	{
	     if (x > y) {
	     	l = 0;
	     } else {
	     	  double s = 0;

	     	  for (int k = 0; k < x; k++)
	     	      s += r.cell(k, y) * r.cell(k, x);
	     	  l = (x == y) ? sqrt(a - s) :
               	  	 (1.0 / r2.cell(x,x) * (a - s));
	     }			 
	}

*//*
	// sequential implementation of cholesky
	to(L l)  from(A a) { 
 	     for (int i = 0; i < a.height(); i++) {
             	 for (int j = 0; j < (i+1); j++) {
            	     double s = 0;
            	     if (j != i) 
		        l.cell(i,j) = 0;

            	     for (int k = 0; k < j; k++)
                     	 s += l.cell(k,i) * l.cell(k,j);
            	     l.cell(j, i) = (i == j) ?
                           sqrt(a.cell(i, i) - s) :
                           (1.0 / l.cell(j, j) * (a.cell(j, i) - s));
        	 }
	     }	
	}
*/

}

#endif // CHOLESKY_PBCC
