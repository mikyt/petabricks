#ifndef INSERTIONSORT_PBCC
#define INSERTIONSORT_PBCC

#include "../simple/copy.pbcc"

/*
transform InsertionsortSubArray
from IN[n]
to OUT[n]
{
  to(OUT out) from (IN in)
  {
    for (int i = 1; i < n; i++) {
      ElementT value = out.cell(i);
      int j = i - 1;
      while (j >= 0 && out.cell(j) > value) {
        out.cell(j + 1) = out.cell(j);
        j--;
      }
      out.cell(j + 1) = value;
    }
  }
}
*/

transform InsertionsortSubArray
from IN[n]
to OUT[n]
{
  to(OUT out) from (IN in)
  {
    out.cell(0) = in.cell(0);
    for (int i = 1; i < n; i++) {
      ElementT value = in.cell(i);
      int j = i - 1;
      if (value < out.cell(0)) {
        while (j >= 0) {
          out.cell(j + 1) = out.cell(j);
          j--;
        }
      } else {
        while (out.cell(j) > value) {
          out.cell(j + 1) = out.cell(j);
          j--;
        }
      }
      out.cell(j + 1) = value;
    }
  }
}



transform Insertionsort
from IN[n]
to OUT[n]
{
  to(OUT out) from (IN in)
  {
    InsertionsortSubArray(out, in);
  }
}

#endif // INSERTIONSORT_PBCC

