#ifndef RADIXSORT_PBCC
#define RADIXSORT_PBCC

#include "../simple/copy.pbcc"

#ifndef SORTSUBARRAY
#define SORTSUBARRAY RadixsortSubArray
#endif

#define NUM_BITS_PER_RADIX 4
#define NUM_BUCKETS (1 << NUM_BITS_PER_RADIX)

%{

typedef          long long int64;
typedef unsigned long long uint64;

static int getBits(ElementT in, int position)
{
  JASSERT(sizeof(ElementT) == 8);
  union {
    ElementT d;
    uint64 u;
  };
  d = in;
  uint64 inInt = u;
//printf("in:    %llx\n", in);
//printf("inInt: %llx\n", inInt);
  uint64 mask = -int64(inInt >> 63) | ((uint64) 1 << 63);
  inInt ^= mask;
  return (inInt & ((uint64) (NUM_BUCKETS - 1) << position)) >> position;
}

static void Radix(workstealing::MatrixRegion1D &out, workstealing::MatrixRegion1D &in, int *buckets, int pos)
{
  in.useOnCpu();
  int i;
  for (i = 0; i < in.size(0); i++) {
    buckets[getBits(in.cell(i), pos) + 2]++;
  }
  for (i = 3; i < NUM_BUCKETS + 2; i++) {
    buckets[i] += buckets[i - 1];
  }

  for (i = 0; i < in.size(0); i++) {
    out.cell(buckets[getBits(in.cell(i), pos) + 1]++) = in.cell(i);
  }
}


static void Radix(distributed::MatrixRegion1D &out, distributed::MatrixRegion1D &in, int *buckets, int pos)
{
  int i;
  for (i = 0; i < in.size(0); i++) {
    buckets[getBits(in.cell(i), pos) + 2]++;
  }
  for (i = 3; i < NUM_BUCKETS + 2; i++) {
    buckets[i] += buckets[i - 1];
  }

  for (i = 0; i < in.size(0); i++) {
    out.cell(buckets[getBits(in.cell(i), pos) + 1]++) = in.cell(i);
  }
}

%}

transform RadixsortSubArray
from IN[n], Position
to OUT[n], TEMP[n]
{
  to (OUT out, TEMP temp) from (IN in, Position pos)
  {
    
    out.useOnCpu();
//    printf("RadixsortSubArray called\n");
    int buckets[NUM_BUCKETS + 2];
    memset(buckets, 0, sizeof(buckets));
    int p = pos;

    if (p > 64 - NUM_BITS_PER_RADIX) {
      p = 64 - NUM_BITS_PER_RADIX;
    }

    Copy1D(temp, out);
    Radix(out, temp, buckets, p);
    
    if (p > 0) {
      for (int i = 0; i < NUM_BUCKETS; i++) {
        if (buckets[i + 1] > buckets[i] + 1) {
          spawn SORTSUBARRAY(out.region(buckets[i], buckets[i + 1]), 
                            temp.region(buckets[i], buckets[i + 1]),
                            in.region(buckets[i], buckets[i + 1]), 
                            p - NUM_BITS_PER_RADIX);
        }
      }
    }
  }
}

transform Radixsort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in)
  {
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    Copy1D(out, in);
    RadixsortSubArray(out, temp, in, 64 - NUM_BITS_PER_RADIX);
  }
}

#endif // RADIXSORT_PBCC

