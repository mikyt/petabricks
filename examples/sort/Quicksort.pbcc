#ifndef QUICKSORT_PBCC
#define QUICKSORT_PBCC

#include "../simple/copy.pbcc"

#ifndef SORTSUBARRAY
#define SORTSUBARRAY QuicksortSubArray
#endif

%{

inline void swap1D(workstealing::MatrixRegion1D &A, int x, int y)
{
  ElementT temp = A.cell(x);
  A.cell(x) = A.cell(y);
  A.cell(y) = temp;
}

inline void swap1D(distributed::MatrixRegion1D &A, int x, int y)
{
  ElementT temp = A.cell(x);
  A.cell(x) = A.cell(y);
  A.cell(y) = temp;
}

int partition(workstealing::MatrixRegion1D &A)
{
  A.useOnCpu();
  int left = 0;
  int right=A.count()-1;
  ElementT pivotValue = A.cell(right);
  int storeIndex = left;
  for (int i = left; i < right; i++) {
    if (A.cell(i) <= pivotValue) {
      swap1D(A, i, storeIndex);
      storeIndex++;
    }
  }
  swap1D(A, storeIndex, right);
  return storeIndex;
}

int partition(distributed::MatrixRegion1D &A)
{
  int left = 0;
  int right=A.count()-1;
  ElementT pivotValue = A.cell(right);
  int storeIndex = left;
  for (int i = left; i < right; i++) {
    if (A.cell(i) <= pivotValue) {
      swap1D(A, i, storeIndex);
      storeIndex++;
    }
  }
  swap1D(A, storeIndex, right);
  return storeIndex;
}

%}

transform QuicksortSubArray
from IN[n], Pos
to OUT[n], TEMP[n]
{
  to (OUT out, TEMP temp) from (IN in, Pos pos)
  {
    int p = partition(out);
    if(p>1)
      spawn SORTSUBARRAY(out .region(0,p),
                         temp.region(0,p), 
                         in  .region(0,p), pos);
    if(p<out.count()-2)
      spawn SORTSUBARRAY(out .region(p+1,n),
                         temp.region(p+1,n), 
                         in  .region(p+1,n), pos);
  }
}

transform QuickSort
from IN[n]
to OUT[n]
{
  to (OUT out) from (IN in) 
  {
    Copy1D(out, in);
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    QuicksortSubArray(out, temp, in, 60);
  }
}

#endif // QUICKSORT_PBCC

