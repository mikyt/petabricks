#include "../simple/copy.pbcc"

#ifndef SORTSUBARRAY
#define SORTSUBARRAY Parallel_MergesortSubArray
#endif

%{

template<typename T>
inline int BinarySearch(ElementT value, const T&A)
{
  int low = 0;
  int high = A.count() - 1;
  int mid;

  while (low <= high) {
    mid = (low + high) / 2;
    if (A.cell(mid) > value)
        high = mid - 1;
    else if (A.cell(mid) < value)
        low = mid + 1;
    else
        return mid;
  }
  return low;
}

%}


transform Merge2_Parallel
from IN1[n1], IN2[n2]
to OUT[n1 + n2]
tunable Cutoff(5000, 100, 100000)
{
  to (OUT out) from (IN1 in1, IN2 in2)
  {
    if (n1 + n2 < Cutoff) {
      int ptr1 = 0;
      int ptr2 = 0;
      int i = 0;

      while (ptr1 < n1 && ptr2 < n2) {
        if (in1.cell(ptr1) < in2.cell(ptr2)) {
          out.cell(i++) = in1.cell(ptr1++);
        } else {
          out.cell(i++) = in2.cell(ptr2++);
        }
      }

      while (ptr1 < n1) {
        out.cell(i++) = in1.cell(ptr1++);
      }

      while (ptr2 < n2) {
        out.cell(i++) = in2.cell(ptr2++);
      }
    } else if (n1 < n2) {
      int m1 = n2 / 2;
      int m2 = BinarySearch(in2.cell(m1), in1);

      out.cell(m1 + m2) = in2.cell(m1);

      spawn Merge2_Parallel(out.region(0, m1 + m2), in2.region(0, m1), in1.region(0, m2));
      spawn Merge2_Parallel(out.region(m1 + m2 + 1, n2 + n1), in2.region(m1 + 1, n2), in1.region(m2, n1));
    } else {
      int m1 = n1 / 2;

      int m2 = BinarySearch(in1.cell(m1), in2);

      out.cell(m1 + m2) = in1.cell(m1);

      spawn Merge2_Parallel(out.region(0, m1 + m2), in1.region(0, m1), in2.region(0, m2));
      spawn Merge2_Parallel(out.region(m1 + m2 + 1, n1 + n2), in1.region(m1 + 1, n1), in2.region(m2, n2));
    }
  }
}


transform Parallel_MergesortSubArray
from IN[n], Pos
to OUT[n], TEMP[n]
{
  to(OUT out, TEMP temp) from (IN in, Pos p)
  {
    int i;

    for (i = 0; i < 2; i++) {
      if (n * (i + 1) / 2 - n * i / 2 > 1) {
        spawn SORTSUBARRAY(out.region(n * i / 2, n * (i + 1) / 2),
                           temp.region(n * i / 2, n * (i + 1) / 2),
                           in  .region(n * i / 2, n * (i + 1) / 2), p);
      }
    }

    sync;
    Copy1D(temp, out);
    Merge2_Parallel(out, temp.region(0, n/2), temp.region(n/2, n));
  }
}

transform Parallel_Mergesort
from IN[n]
to OUT[n]
{
  to(OUT out) from (IN in)
  {
    Copy1D(out, in);
    MatrixRegion1D temp = MatrixRegion1D::allocate(n);
    Parallel_MergesortSubArray(out, temp, in, 64);

    int i;

    /*
    for (i = 0; i < in.count(); i++) {
      printf("%lf\n", in.cell(i));
    }
    printf("\n\n");

    for (i = 0; i < out.count(); i++) {
      printf("%lf\n", out.cell(i));
    }
    printf("\n");
    */

    for (i = 0; i < out.count() - 1; i++) {
      if (out.cell(i) > out.cell(i + 1)) {
        printf("Not sorted\n");
        exit(-1);
      }
    } 
  }
}


