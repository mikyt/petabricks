#ifndef CONVFFTW_PBCC
#define CONVFFTW_PBCC

%{

#include <fftw3.h>

pthread_mutex_t fftw_plan_mutex;

// multiply Y1 by Y2, divide by N, store in Y1.  uses 3-mul complex multiply.
inline void complexMultiplyScale(ElementT Y1[2], ElementT Y2[2], ElementT N)
{
  ElementT ac, bd, abcd;
  ac = Y1[0] * Y2[0];
  bd = Y1[1] * Y2[1];
  abcd = (Y1[0] + Y1[1]) * (Y2[0] + Y2[1]);
  Y1[0] = (ac - bd) / N;
  Y1[1] = (abcd - ac - bd) / N;
}

%}

transform ConvFFTW
from A[n], B[n]
to C[n]
{
  to (C c) from (A a, B b)
  {
    ElementT *X1, *X2;
    fftw_complex *Y1, *Y2;
    X1 = (ElementT *) fftw_malloc(sizeof(ElementT) * n);
    X2 = (ElementT *) fftw_malloc(sizeof(ElementT) * n);
    Y1 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * n);
    Y2 = (fftw_complex *) fftw_malloc(sizeof(fftw_complex) * n);

    fftw_plan p1, p2, p3;
    pthread_mutex_lock(&fftw_plan_mutex);
    p1 = fftw_plan_dft_r2c_1d(n, X1, Y1, FFTW_ESTIMATE);
    p2 = fftw_plan_dft_r2c_1d(n, X2, Y2, FFTW_ESTIMATE);
    p3 = fftw_plan_dft_c2r_1d(n, Y1, X1, FFTW_ESTIMATE);
    pthread_mutex_unlock(&fftw_plan_mutex);

    _regioncopy(X1, a);
    _regioncopy(X2, b);

    fftw_execute(p1);
    fftw_execute(p2);

    for (int i = 0; i < n; i++) {
      complexMultiplyScale(Y1[i], Y2[i], (ElementT) n);
    }

    fftw_execute(p3);

    _regioncopy(c, X1);

    fftw_destroy_plan(p1);
    fftw_destroy_plan(p2);
    fftw_destroy_plan(p3);
    fftw_free(X1);
    fftw_free(X2);
    fftw_free(Y1);
    fftw_free(Y2);
  }
}

#endif // CONVFFTW_PBCC
