
transform Nil from A to B {
  to(B a) from() { a=0; }
}

transform TestRuleIR from IN[w,h] to OUT[w,h] 
{
  OUT.cell(x,y) from(IN.cell(x,y)     i,
                     OUT.cell(x-1, y-1) upleft)
  {
    if(true)
     return i+upleft;
    else 
    { 
      ElementT t;
      spawn Nil(t, t);
      int x=1;
      return 0; 
    }
  }
  
  secondary OUT.cell(x,y) from(IN.cell(x,y) i)
  {
    //int power2 = (1<<(int)(log(2)/log(2))) ;
    int power2 = (1<<(int)(log(2.0)/log(2.0))) ;
    return i;
  }
 
  secondary OUT.cell(x,y) from(IN.cell(x,y) i)
  {
    switch(x){
   // case 1:
   // case 2:
      i+2;
      1;

    }
    return i;
  }

  secondary OUT.cell(x,y) from(IN.cell(x,y) i)
  {
    int *a, *b, c, d;
    for(int x=0; x<10; ++x) { a = &c; b=a; }
    for(int x=0; x<10; ++x) { b = &d; a=b; }
    return i;
  }
}



