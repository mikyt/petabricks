#ifndef TRISOLVERL_PBCC
#define TRISOLVERL_PBCC

// Right lower (RL) triangular solve
// Solve XA = B for X, where A is lower triangular

#include "TriSolveLU.pbcc"
#include "TriSolveGenerators.pbcc"

transform TriSolveRLInPlace
from UNITFLAG, A[n,n]
to X[n,m]
{
    to (X x) from (UNITFLAG unitFlag, A a) {
        TriSolveLUInPlace(x.transposed(), unitFlag, a.transposed());
    }
}

transform TriSolveRL
from UNITFLAG, A[n,n], B[n,m]
to X[n,m]
generator TriSolveLGenerator
{
    to (X x) from (UNITFLAG unitFlag, A a, B b) {
        Copy2D(x, b);
        TriSolveRLInPlace(x, unitFlag, a);
    }
}

#endif // TRISOLVERL_PBCC
