#ifndef TRISOLVEGENERATORS_PBCC
#define TRISOLVEGENERATORS_PBCC

// make OUT triangular
transform Tri
from UPFLAG
to OUT[n,n]
{
    to (OUT.cell(j,i) out)
    from (UPFLAG upFlag)
    {
        out = (i == j || (upFlag && i < j) || (!upFlag && i > j)) ? out : 0;
    }
}

transform TriSolveLGenerator
to UNITFLAG, T[n,n], B[n,n]
{
    to (UNITFLAG unitFlag, T t, B b)
    from ()
    {
        TriSolveGenerator(unitFlag, t, b, 0);
    }
}

transform TriSolveUGenerator
to UNITFLAG, T[n,n], B[n,n]
{
    to (UNITFLAG unitFlag, T t, B b)
    from ()
    {
        TriSolveGenerator(unitFlag, t, b, 1);
    }
}

// Use diagonally weighted random matrix so that back-solve is stable
transform TriSolveGenerator
from UPFLAG
through A[n,n]
to UNITFLAG, T[n,n], B[n,n]
{
    to (A.cell(j, i) a,
        B.cell(j, i) b)
    from ()
    {
        a = PetabricksRuntime::randNormal(0, 1);
        b = PetabricksRuntime::randNormal(0, 1);
    }

    to (UNITFLAG unitFlag, T t)
    from (UPFLAG upFlag, A a)
    {
        unitFlag = PetabricksRuntime::randInt(0, 2);  // coin flip
        Tri(t, upFlag);
        for (IndexT i = 0; i < n; ++i) {
            t.cell(i, i) += n;
        }
    }
}

#endif // TRISOLVEGENERATORS_PBCC
