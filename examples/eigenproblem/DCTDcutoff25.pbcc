#ifndef DCTDCUTOFF25_PBCC
#define DCTDCUTOFF25_PBCC

#include "extern.h"
#include "../simple/copy.pbcc"
#include "mergeQ.pbcc"
#include "QRTD.pbcc"


// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routine
transform DCTDcutoff25recursive
from Diag[n], Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]

{

   //Recursive case
   to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein) {

	int i,j,info,size=n,cutpnt=n/2,nsquared=n*n;

	MatrixRegion2D q1 = MatrixRegion2D::allocate(cutpnt,cutpnt);
        MatrixRegion2D q2 = MatrixRegion2D::allocate(n-cutpnt,n-cutpnt);

	ElementT rho=Ein.cell(cutpnt-1);
	ElementT *work = new ElementT[4*size+nsquared];
	int *indxq = new int[size];
	int *iwork = new int[4*size];	

	MatrixRegion1D temp1 = MatrixRegion1D::allocate(n);
	
	D[cutpnt-1] -= rho;
	D[cutpnt] -= rho;

	DCTDcutoff25(eig.region(0,cutpnt),q1,eig.region(0,cutpnt),Ein.region(0,cutpnt-1));
	DCTDcutoff25(eig.region(cutpnt,size),q2,eig.region(cutpnt,size),Ein.region(cutpnt,size-1));


	mergeQ(vec,q1,q2);

	for(i=0; i<cutpnt; i++) {
		indxq[i]=i+1;
	}
        for(i=cutpnt; i<n; i++){
		indxq[i]=i-cutpnt+1;
	}


	ElementT *D;
	ElementT *Q;
	CArrayStorage Dstore;
	CArrayStorage Qstore;

	to_c_array(eig, D, Dstore);
	to_c_array(vec, Q, Qstore);
	laed1_wrap(&size, D, Q, &size, indxq, &rho, &cutpnt, work, iwork, &info);
	from_c_array(eig, D, Dstore);
	from_c_array(vec, Q, Qstore);

	delete [] work;
	delete [] iwork;
	delete [] indxq;
   }
}

// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routine
transform DCTDcutoff25
from Diag[n], Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]

{
    
    to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein) {

	if (n<=25) {
		QRTD(eig,vec,Din,Ein);
	}
	else {
		//recursive
		Copy1D(eig, Din);
		DCTDcutoff25recursive(eig, vec, Din, Ein);
	}
    }
}

#endif // DCTDCUTOFF25_PBCC
