#ifndef DCTD_PBCC
#define DCTD_PBCC

#include "extern.h"
#include "../simple/transpose.pbcc"
#include "../simple/copy.pbcc"
#include "mergeQ.pbcc"


// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routine
transform DCTDrecursive
from Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]

{

   //Recursive case
   to (Eigenvalue eig, Eigenvector vec) from  (Subdiag Ein) {

	int i;
	int j;
	int info=0;
	int size=n;
	int cutpnt=n/2;
	int nsquared=n*n;

	MatrixRegion2D q1 = MatrixRegion2D::allocate(cutpnt,cutpnt);
  MatrixRegion2D q2 = MatrixRegion2D::allocate(n-cutpnt,n-cutpnt);

	ElementT rho=Ein.cell(cutpnt-1);
	ElementT *work = new ElementT[4*size+nsquared];
	int *indxq = new int[size];
	int *iwork = new int[4*size];	



	MatrixRegion1D temp1 = MatrixRegion1D::allocate(n);

	
//	D[cutpnt-1] -= rho;
//	D[cutpnt] -= rho;
	eig.cell(cutpnt-1) -= rho;
	eig.cell(cutpnt) -= rho;


	DCTDsub(eig.region(0,cutpnt),q1,eig.region(0,cutpnt),Ein.region(0,cutpnt-1));
	DCTDsub(eig.region(cutpnt,size),q2,eig.region(cutpnt,size),Ein.region(cutpnt,size-1));
	mergeQ(vec,q1,q2);
	

	for(i=0; i<cutpnt; i++) {
		indxq[i]=i+1;
	}
        for(i=cutpnt; i<n; i++){
		indxq[i]=i-cutpnt+1;
	}



	ElementT *D;
	ElementT *Q;
	CArrayStorage Dstore;
	CArrayStorage Qstore;


	to_c_array(eig, D, Dstore);
	to_c_array(vec, Q, Qstore);
	laed1_wrap(&size, D, Q, &size, indxq, &rho, &cutpnt, work, iwork, &info);
	from_c_array(eig, D, Dstore);
	from_c_array(vec, Q, Qstore);

	delete [] work;
	delete [] iwork;
	delete [] indxq;
   }
}

// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routine
transform DCTDsub
from Diag[n], Subdiag[n-1]
to Eigenvalue[n], Eigenvector[n,n]

{
    
    to (Eigenvalue eig, Eigenvector vec) from  (Diag Din, Subdiag Ein) {
	//MatrixRegion1D temp1 = MatrixRegion1D::allocate(n);
	//MatrixRegion1D temp2 = MatrixRegion1D::allocate(n-1);
	//printf("all: n = %d\n", n);
	//printout(temp1, Din);
	//printout(temp2, Ein);
	if (n==1) {
		//base case
		vec.cell(0,0) = 1;
		eig.cell(0)=Din.cell(0,0);
		//printf("base: %f\n", eig.cell(0));
	}
	else {
		//recursive
		//printf("call recursive: n = %d\n", n);
		Copy1D(eig, Din);
		DCTDrecursive(eig, vec, Ein);
	}
    }

}

// Find eigenvalues and eigenvectors of IN (tridiagonal symmetric) by LAPACK Divide-and-Conquer routine
transform DCTD
from Diag[n], Subdiag[n-1]
through Eigvectemp[n,n]
to Eigenvalue[n], Eigenvector[n,n]

{

    to (Eigenvalue eig, Eigenvector vecout,  Eigvectemp vectemp) from  (Diag Din, Subdiag Ein) {
        DCTDsub(eig, vectemp, Din, Ein);
        Transpose(vecout, vectemp);
    }
}

#endif // DCTD_PBCC
