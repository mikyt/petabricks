#ifndef BISECTIONTD_PBCC
#define BISECTIONTD_PBCC

#include "extern.h"
#include "../simple/transpose.pbcc"

// Find eigenvalues and eigenvectors of input matrix IN (symmetric) by LAPACK Bisection routine
// note output is Transposed because of row-major and column major difference for LAPACK and PetaBricks
transform BisectionTD
from Diag[n], Subdiag[n-1]
//through Eigvectemp[n,n]
to Eigenvalue[n], Eigenvector[n,n]
{

  to (Eigenvalue Eig, Eigenvector Vec) from (Diag Din, Subdiag Ein)
  {
    char range = 'A';
    char order = 'B';
    int size=n;
    int info = 0;
    int il;
    int iu;
    int m;
    int nsplit;
    int nsquared=n*n;
    ElementT vl;
    ElementT vu;
    ElementT abstol=0;

    // allocate and initialize matrices
    ElementT *Z;
    ElementT *D;
    ElementT *E;
    ElementT *W;

    CArrayStorage Zstore;
    CArrayStorage Dstore;
    CArrayStorage Estore;
    CArrayStorage Wstore;

    to_c_array(Vec, Z, Zstore);
    to_c_array(Din, D, Dstore);
    to_c_array(Ein, E, Estore);
    to_c_array(Eig, W, Wstore);


    ElementT *work = new ElementT[4*size];
    int *iwork = new int[3*size];
    int *iblock = new int[size];
    int *isplit = new int[size];
    int *ifail = new int[size];

    // call LAPACK bisection routine for tridiagonal matrix
    stebz_wrap(&range, &order, &size, &vl, &vu, &il, &iu, &abstol, D, E, &m, &nsplit, W, iblock, isplit, work, iwork, &info);

    // call LAPACK dstein routine for eigenvectors
    delete [] work;
    work = new ElementT[5*n];
    delete [] iwork;
    iwork = new int[n];
    stein_wrap(&size, D, E, &size, W, iblock, isplit, Z, &size, work, iwork, ifail, &info);

    //Transpose(VecOut,Vec);

    from_c_array(Vec, Z, Zstore);
    from_c_array(Eig, W, Wstore);
    free_c_array(D, Dstore);
    free_c_array(E, Estore);

    delete [] work;
    delete [] iwork;
    delete [] iblock;
    delete [] isplit;
    delete [] ifail;
  }

}

#endif // BISECTIONTD_PBCC
