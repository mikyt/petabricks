#ifndef ATOM_PBCC
#define ATOM_PBCC

#define DELTA 20000

#define IA 16807
#define IM 2147483647
#define AM (1.0/IM)
#define IQ 127773
#define IR 2836
#define MASK 123459876

//Does this exist in petabricks?
function random
from in[1]
out next[1], r[1]
{
  double k;
  double ans;

  k=in.cell(0)/IQ;
  next.cell(0) =IA*(in.cell(0)-k*IQ)-IR*k;
  if (in.cell(0) < 0) next .cell(0) += IM;
  r.cell(0) = AM*(in.cell(0));
}

#undef IA
#undef IM
#undef AM
#undef IQ
#undef IR
#undef MASK


function create_atoms
from rho[1], ndimentions[3]
to atom_x[natoms, 3], atom_v[natoms,3]
{
  /* use atom # (generated from lattice coords) as unique seed to generate a
       unique velocity */

  //double alat = pow((4.0/rho.cell(0)),(1.0/3.0));
  double xtmp,ytmp,ztmp;
  MatrixRegion1D v = MatrixRegion1D::allocate(3);
  int i,j,k,m,n;
  int idx = 0;
  for (k = 0; k <= ndimentions.cell(2); k++) {
    for (j = 0; j <= ndimentions.cell(1); j++) {
      for (i = 0; i <= ndimentions.cell(0); i++) {
            xtmp = 0.5*alat*i;
	    ytmp = 0.5*alat*j;
	    ztmp = 0.5*alat*k;
	    
	    temp.cell(0) = k*(2*ndimentions.cell(1))*(2*ndimentions.cell(0)) + j*(2*ndimentions.cell(2)) + i + 1;
            for (m = 0; m < 6; m++) random(v.cell(0), temp.cell(0), temp.cell(0));
            for (m = 0; m < 6; m++) random(v.cell(1), temp.cell(0), temp.cell(0));
            for (m = 0; m < 6; m++) random(v.cell(2), temp.cell(0), temp.cell(0));

	    atom_x.cell(idx, 0) = xtemp;
	    atom_x.cell(idx, 1) = ytemp;
	    atom_x.cell(idx, 2) = ztemp;
	    atom_v.cell(idx, 0) = v.cell(0);
	    atom_v.cell(idx, 1) = v.cell(1);
	    atom_v.cell(idx, 2) = v.cell(2);
	    idx ++;
	    }
    	}
    }
}

function create_velocity
from t_request[1]
to atom_v[natoms, 3], atom_vold[natoms, 3]
{
  int i;

  /* zero center-of-mass motion */

  double vxtot = 0.0;
  double vytot = 0.0;
  double vztot = 0.0;
  
  for (i = 0; i < natoms; i++) {
    vxtot += atom_v.cell(i,0);
    vytot += atom_v.cell(i,1);
    vztot += atom_v.cell(i,2);
  }
  
  vxtot = vxtot/natoms;
  vytot = tmp/natoms;
  vztot = tmp/natoms;

  for (i = 0; i < natoms; i++) {
    atom_v.cell(i, 0) -= vxtot;
    atom_v.cell(i, 1) -= vytot;
    atom_v.cell(i, 2) -= vztot;
    atom_vold.cell(i,0) = atom_v.cell(i,0);
    atom_vold.cell(i,1) = atom_v.cell(i,1);
    atom_vold.cell(i,2) = atom_v.cell(i,2);
  }

  /* rescale velocities, including old ones */

  MatrixRegion1D t = MatrixRegion1D::allocate(1);
  thermo_temperature(t, atom_v, atom_vold);
  double factor = sqrt(t_request/t);
  for (i = 0; i < natoms; i++) {
    atom_v.cell(i,0) *= factor;
    atom_v.cell(i,1) *= factor;
    atom_v.cell(i,2) *= factor;
    atom_vold.cell(i,0) = atom_v.cell(i,0);
    atom_vold.cell(i,1) = atom_v.cell(i,1);
    atom_vold.cell(i,2) = atom_v.cell(i,2);
  }
}

function create_box
from dimentions[3], rho[1]
to atom_box_prd[3]
{
  double lattice = pow((4.0/rho.cell(0)),(1.0/3.0));
  atom_box_prd.cell(0) = dimentions.cell(0)*lattice;
  atom_box_prd.cell(1) = dimentions.cell(1)*lattice;
  atom_box_prd.cell(2) = dimentions.cell(2)*lattice;
}


#endif //ATOM_PBCC