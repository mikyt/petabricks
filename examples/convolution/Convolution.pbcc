#ifndef CONVOLUTION_PBCC
#define CONVOLUTION_PBCC

#include "ConvolutionFFT.pbcc"
#define WAYS 4
#define MAX(x, y) ((x) >= (y) ? (x) : (y))
#define MIN(x, y) ((x) <= (y) ? (x) : (y))

transform ConvolutionRegular
from A[n], B[m]
to C[n+m-1]
{
  to (C c) from (A a, B b)
  {
    int i, j;
    for (i = 0; i < m + n - 1; i++) {
      c.cell(i) = 0;
    }
    for (i = 0; i < n; i++) {
      for (j = 0; j < m; j++) {
        c.cell(i+j) += a.cell(i) * b.cell(j);
      }
    }
  }
}

// assumes first argument is longer
// TODO: T should be smaller: ((waySize + m - 1) x WAYS),
//       where waySize = ceiling(n / WAYS)
transform ConvolutionRecursive
from A[n], B[m]
//through T[((n + WAYS - 1) / WAYS) + m - 1, WAYS]
through T[n + m - 1, WAYS]
to C[n+m-1]
{
  to (T t) from (A a, B b)
  {
    int waySize = (n + WAYS - 1) / WAYS;
    for (int i = 0; i < WAYS; i++) {
      int aStart = i * waySize;
      int aEnd = MIN((i + 1) * waySize, n);
      int aSegLen = aEnd - aStart;
      if (aSegLen > 0) {
        spawn Convolution(t.region(0, i, aSegLen + m - 1, i + 1).row(0),
                           a.region(aStart, aEnd),
                           b);
      }
      // zero out rest of row
      int tZeroStart = (aSegLen == 0 ? 0 : aSegLen + m - 1);
      for (int j = tZeroStart; j < t.size(0); j++) {
        t.cell(j, i) = 0;
      }
    }
    sync;

//  for (int i = 0; i < WAYS; i++) {
//    int aStart = i * waySize;
//    int aEnd = MIN((i + 1) * waySize, n);
//    int aSegLen = aEnd - aStart;
//    printf("(%g", t.cell(0, i));
//    for (int j = 1; j < n + m - 1; j++) {
//      printf(", %g", t.cell(j, i));
//    }
//    printf(")\n");
//  }
    t.useOnCpu();
  }

  to (C.cell(i) c) from (T t)
  {
    int j, waySize = (n + WAYS - 1) / WAYS;
    c = 0;
    for (j = MAX(0, (i - (m - 1)) / waySize);
         j < MIN(WAYS, i / waySize + 1);
         j++) {
      c += t.cell(i - j * waySize, j);
    }
  }
}

transform Convolution
from A[n], B[m]
to C[n+m-1]
{
  to (C c) from (A a, B b)
  {
    //printf("Calling (%d + %d) regular ...\n", (int) n, (int) m);
    ConvolutionRegular(c, a, b);
  }

  to (C c) from (A a, B b)
  {
    //printf("Calling (%d + %d) FFT ...\n", (int) n, (int) m);
    ConvolutionFFT(c, a, b);
    //printf("Finished (%d + %d) FFT ...\n", (int) n, (int) m);
  }

  to (C c) from (A a, B b)
  {
    // TODO: This is a bad idea.  Could potentially be inited by
    //   multiple threads simultaneously.  Init is placed here
    //   because this is the entry point for parallelism.  Long-term,
    //   need somewhere in .pbcc file to place init code that will
    //   only be called once.
    //
    //   Mutex is never destroyed.
    static bool mutex_inited = false;
    if (!mutex_inited) {
      pthread_mutex_init(&fftw_plan_mutex, NULL);
      mutex_inited = true;
    }

    //printf("Calling (%d + %d) recursive ...\n", (int) n, (int) m);
    if (a.count() <= WAYS && b.count() <= WAYS) {
      ConvolutionRegular(c, a, b);
    } else {
      if (a.count() >= b.count())
      {
        ConvolutionRecursive(c, a, b);
      } else {
        ConvolutionRecursive(c, b, a);
      }
    }
  }
}

#endif // CONVOLUTION_PBCC
