#ifndef NWKDE_PBCC
#define NWKDE_PBCC

#include "../simple/macros.h"
#include "../simple/reduce.pbcc"
#include "nwkde.h"
#include "nwkdeGenerators.pbcc"
#include "nwkdeMetric.pbcc"
#include "utils.pbcc"

%{

/* wrap relative difference into [-180,180]
 * do most of the arithmetic in integers for speed
 * P360 and M360 indicate "plus 360" and "minus 360" */
inline ElementT wrapWindDirDiff(ElementT diff)
{
    /* add 360 *before* cast to round towards -INF instead of towards 0 */
    int diffIntP360 = (int) (diff + 360);

    /* add 180 to ensure modulo result is positive */
    int diffIntWrapP360 = ((diffIntP360 + 180) % 360) + 180;

    return diff + (diffIntWrapP360 - diffIntP360);
}

//  inline __attribute__((always_inline)) __attribute__((flatten))
//  ElementT lookup(const ConstMatrixRegion2D data,
//                         const ConstMatrixRegion1D var,
//                         const IndexT index)
//  {
//      return data.cell(var.cell(0), index + var.cell(1));
//  }

//  inline __attribute__((always_inline)) __attribute__((flatten))
//  ElementT lookup(const ConstMatrixRegion2D data,
//                         const ConstMatrixRegion2D var,
//                         const IndexT row,
//                         const IndexT index)
//  {
//      return data.cell(var.cell(0, row), index + var.cell(1, row));
//  }

%}

transform NWKDECheckInputs
from TRAINDATA[m,n], TRAINX[2,p], TRAINY[2], TRAININDICES[l],
     TESTDATA[m2,n2], TESTX[2,p], TESTINDICES[q]
to INPUTSCHECKED
{
    INPUTSCHECKED
    from (TRAININDICES trainIndices, TRAINX trainX, TRAINY trainY,
          TESTINDICES testIndices, TESTX testX)
    {
        ElementT min, max, min2, max2;

        findMinAndMax(&min, &max, trainX.col(0));
        fprintf(stderr, "trainX.col(0) range: (%g, %g)\n", min, max);
        JASSERT (min >= 0 && max < m)(m).Text("trainX.col(0) out of bounds");

        fprintf(stderr, "trainY.cell(0): %g\n", trainY.cell(0));
        JASSERT (trainY.cell(0) >= 0 && trainY.cell(0) < m)
                (m).Text("trainY.cell(0) out of bounds");

        findMinAndMax(&min, &max, testX.col(0));
        fprintf(stderr, "testX.col(0) range: (%g, %g)\n", min, max);
        JASSERT (min >= 0 && max < m2)(m2).Text("testX.col(0) out of bounds");

        findMinAndMax(&min, &max, trainIndices);
        findMinAndMax(&min2, &max2, trainX.col(1));
        fprintf(stderr, "trainIndices + trainX.col(1) range: (%g, %g)\n",
                min + min2, max + max2);
        JASSERT (min + min2 >= 0 && max + max2 < n)
                (n).Text("trainIndices + trainX.col(1) out of bounds");

        fprintf(stderr, "trainIndices + trainY.cell(1) range: (%g, %g)\n",
                min + trainY.cell(1), max + trainY.cell(1));
        JASSERT (min + trainY.cell(1) >= 0 && max + trainY.cell(1) < n)
                (n).Text("trainIndices + trainY.cell(1) out of bounds");

        findMinAndMax(&min, &max, testIndices);
        findMinAndMax(&min2, &max2, testX.col(1));
        fprintf(stderr, "testIndices + testX.col(1) range: (%g, %g)\n",
               min + min2, max + max2);
        JASSERT (min + min2 >= 0 && max + max2 < n2)
                (n).Text("testIndices + testX.col(1) out of bounds");
    }
}

/*  TRAINDATA - block of data: n time slices, m variables per time slice
    TRAININDICES - l time indices into TRAINDATA to use for training

    TESTDATA - block of data: n2 time slices, m2 variables per time slice
    TESTINDICES - q indices into TESTDATA to evaluate the regression

    For each time index in TRAININDICES or TESTINDICES, we associate
    a p-dim vector of predictors for use during regression.  Each predictor
    variable is represented by a 2-element row in TRAINX.  The first element
    of each row is the column index (into TRAINDATA) of the variable.  The
    second element is the time offset relative to the current time index.

    In this way, we can build predictor vectors that contain overlapping data
    for different time indices.  TRAINY specifies the output variable location
    in TRAINDATA for each time index.  Finally, TESTX specifies how to
    construct the predictor vector in TESTDATA.

    DIRFLAGS - indicates whether TRAINDATA column corresponds to a wind
               direction \in [0, 360]
    SPLIT - set to 0 for normal operation.  If non-zero, determines how many
            partitions to split the training set to do n-fold cross validation
    KERNELWIDTHS - width of the kernel function to use for a data column
    MASKWIDTH - width of training mask.  This tells the transform to omit
                training indices less than MASKWIDTH indices of the test index
                when computing the regression.  Note: to be used when TESTDATA
                is equal to TRAINDATA.  May set to 0 (no mask effect) if
                TESTDATA is separate from TRAINDATA.

    SQDIFFS - squared differences for each predictor for each train-test
              point pair
    WEIGHTS - weights computed with Gaussian kernel function for each
              train-test point pair
    PARTIALS - weighted output partial sums
*/

#define INCLUDE_METHOD2
#define INCLUDE_METHOD3

// The three methods below are listed in decreasing order of both available
// parallelism and memory traffic.
transform NWKDEBase
from TRAINDATA[m,n], TRAINX[2,p], TRAINY[2], TRAININDICES[l],
     TESTDATA[m2,n2], TESTX[2,p], TESTINDICES[q],
     DIRFLAGS[m], KERNELWIDTHS[m], SPLIT, MASKWIDTH
to RESULT[q]
{

#ifdef INCLUDE_METHOD1
    to   (RESULT result)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES trainIndices,
          TESTDATA testData, TESTX testX, TESTINDICES testIndices,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
        NWKDEBase1(result, trainData, trainX, trainY, trainIndices,
                   testData, testX, testIndices,
                   dirFlags, kernelWidths, split, maskWidth);
    }
#endif

#ifdef INCLUDE_METHOD2
    to   (RESULT result)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES trainIndices,
          TESTDATA testData, TESTX testX, TESTINDICES testIndices,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
        NWKDEBase2(result, trainData, trainX, trainY, trainIndices,
                   testData, testX, testIndices,
                   dirFlags, kernelWidths, split, maskWidth);
    }
#endif

#ifdef INCLUDE_METHOD3
    to   (RESULT result)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES trainIndices,
          TESTDATA testData, TESTX testX, TESTINDICES testIndices,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
        NWKDEBase3(result, trainData, trainX, trainY, trainIndices,
                   testData, testX, testIndices,
                   dirFlags, kernelWidths, split, maskWidth);
    }
#endif
}

// Compute weights and partials directly with one pass through the data
transform NWKDEBase2
from TRAINDATA[m,n], TRAINX[2,p], TRAINY[2], TRAININDICES[l],
     TESTDATA[m2,n2], TESTX[2,p], TESTINDICES[q],
     DIRFLAGS[m], KERNELWIDTHS[m], SPLIT, MASKWIDTH
to RESULT[q]
through WEIGHTS[l,q], PARTIALS[l,q]
{
    to   (PARTIALS.cell(j,k) partial,
          WEIGHTS.cell(j,k) weight)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES.cell(j) trainIndex,
          TESTDATA testData, TESTX testX, TESTINDICES.cell(k) testIndex,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
        IndexT i, dirFlag, partStart, partEnd, partSize;
        ElementT y, kernelWidth, trainPoint, testPoint, diff, sum;

        // compute the partition that this testIndex lies in
        partStart = partEnd = k;
        if (split > 0) {
            partSize = l / split;
            partStart = k - (k % partSize);
            partEnd = partStart + partSize;
        }

        // TODO: lookup function is really slow (even inlined)
//      y = lookup(trainData, trainY, trainIndex);
        // do lookup without the function call overhead
        y = trainData.cell(trainY.cell(0), trainIndex + trainY.cell(1));

        // skip current training index if it is too close to the test
        // index, if it's not in the same partition, or if the training
        // output value is a NAN
        if ((trainIndex > testIndex - maskWidth &&
             trainIndex < testIndex + maskWidth) ||
            (j >= partStart && j < partEnd) ||
            ISNAN(y)) {
            weight = partial = 0;
            return;
        }

        // loop over predictor variables to calculate training weight
        sum = 0;
        for (i = 0; i < trainX.size(1); ++i) {
            dirFlag     =     dirFlags.cell(trainX.cell(0, i));
            kernelWidth = kernelWidths.cell(trainX.cell(0, i));
            // TODO: lookup function is really slow (even inlined)
//          trainPoint = lookup(trainData, trainX, i, trainIndex);
//          testPoint  = lookup( testData,  testX, i,  testIndex);
            // do lookup without the function call overhead
            trainPoint = trainData.cell(trainX.cell(0, i),
                                        trainIndex + trainX.cell(1, i));
            testPoint = testData.cell(testX.cell(0, i),
                                      testIndex + testX.cell(1, i));

            // skip this variable if nan is detected in the test point
            if (ISNAN(testPoint)) { continue; }

            // skip this training index if nan is detected
            if (ISNAN(trainPoint)) { weight = partial = 0; return; }

            // compute diff (and wrap if dirFlag is true)
            diff = trainPoint - testPoint;
            if (dirFlag) { diff = wrapWindDirDiff(diff); }

            // normalize and save squared difference
            diff /= kernelWidth;
            sum += diff * diff;
        }

        weight = exp(-((ElementT) sum));
        partial = weight * y;
#ifdef DEBUG
        fprintf(stderr, "method 2:  weight(%d, %d) = %g\n", j, k, weight);
        fprintf(stderr, "method 2: partial(%d, %d) = %g\n", j, k, partial);
#endif
    }

    to (RESULT.cell(k) result)
    from (PARTIALS.row(k) partials,
          WEIGHTS.row(k) weights)
    {
        ElementT totalWeight;
        ReduceAdd1D(result, partials);
        ReduceAdd1D(totalWeight, weights);
        result /= totalWeight;
#ifdef DEBUG
        fprintf(stderr, "Output %d = %g\n", k, result);
#endif // DEBUG
    }
}

// Compute results directly with one pass through the data
transform NWKDEBase3
from TRAINDATA[m,n], TRAINX[2,p], TRAINY[2], TRAININDICES[l],
     TESTDATA[m2,n2], TESTX[2,p], TESTINDICES[q],
     DIRFLAGS[m], KERNELWIDTHS[m], SPLIT, MASKWIDTH
to RESULT[q]
{
    to   (RESULT.cell(k) result)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES trainIndices,
          TESTDATA testData, TESTX testX, TESTINDICES.cell(k) testIndex,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
        bool skipIndexFlag;
        IndexT i, j, dirFlag, trainIndex, partSize, partStart, partEnd;
        ElementT y, kernelWidth, trainPoint, testPoint, diff, sum,
                 weight, partial, totalPartial, totalWeight;

        // compute the partition that this testIndex lies in
        partStart = partEnd = k;
        if (split > 0) {
            partSize = l / split;
            partStart = k - (k % partSize);
            partEnd = partStart + partSize;
        }

        // loop over training points
        totalPartial = totalWeight = 0;
        for (j = 0; j < trainIndices.count(); ++j) {

            trainIndex = trainIndices.cell(j);
            // TODO: lookup function is really slow (even inlined)
//          y = lookup(trainData, trainY, trainIndex);
            // do lookup without the function call overhead
            y = trainData.cell(trainY.cell(0), trainIndex + trainY.cell(1));

            // skip current training index if it is too close to the test
            // index, if it's not in the same partition, or if the training
            // output value is a NAN
            if ((trainIndex > testIndex - maskWidth &&
                 trainIndex < testIndex + maskWidth) ||
                (j >= partStart && j < partEnd) ||
                ISNAN(y)) {
                continue;
            }

            // loop over predictor variables to calculate training weight
            sum = 0;
            skipIndexFlag = false;
            for (i = 0; i < trainX.size(1); ++i) {
                dirFlag     =     dirFlags.cell(trainX.cell(0, i));
                kernelWidth = kernelWidths.cell(trainX.cell(0, i));
                // TODO: lookup function is really slow (even inlined)
//              trainPoint = lookup(trainData, trainX, i, trainIndex);
//              testPoint  = lookup( testData,  testX, i,  testIndex);
                // do lookup without the function call overhead
                trainPoint = trainData.cell(trainX.cell(0, i),
                                            trainIndex + trainX.cell(1, i));
                testPoint = testData.cell(testX.cell(0, i),
                                          testIndex + testX.cell(1, i));

                // skip this variable if nan is detected in the test point
                if (ISNAN(testPoint)) { continue; }

                // skip this training index if nan is detected
                if (ISNAN(trainPoint)) { skipIndexFlag = true; break; }

                // compute diff (and wrap if dirFlag is true)
                diff = trainPoint - testPoint;
                if (dirFlag) { diff = wrapWindDirDiff(diff); }

                // normalize and save squared difference
                diff /= kernelWidth;
                sum += diff * diff;
            }

            if (skipIndexFlag) { continue; }

            weight = exp(-((ElementT) sum));
            partial = weight * y;

#ifdef DEBUG
            fprintf(stderr, "method 3:  weight(%d, %d) = %g\n", j, k, weight);
            fprintf(stderr, "method 3: partial(%d, %d) = %g\n", j, k, partial);
#endif // DEBUG
            totalWeight += weight;
            totalPartial += partial;
        }

        result = totalPartial / totalWeight;
#ifdef DEBUG
        fprintf(stderr, "Output %d = %g\n", k, result);
#endif // DEBUG
    }
}

transform NWKDE
from TRAINDATA[_M_,_N_], TRAINX[2,_P_], TRAINY[2], TRAININDICES[_L_],
     TESTDATA[_M2_,_N2_], TESTX[2,_P_], TESTINDICES[_Q_],
     DIRFLAGS[_M_], KERNELWIDTHS[_M_], SPLIT, MASKWIDTH
to RESULT[_Q_]
through INPUTSCHECKED
generator NWKDEGenerator2
accuracy_metric NWKDEMetric2
{
    to   (RESULT result)
    from (TRAINDATA trainData, TRAINX trainX,
          TRAINY trainY, TRAININDICES trainIndices,
          TESTDATA testData, TESTX testX, TESTINDICES testIndices,
          DIRFLAGS dirFlags, KERNELWIDTHS kernelWidths, SPLIT split,
          MASKWIDTH maskWidth)
    {
#ifdef DEBUG
        ElementT ret;
        NWKDECheckInputs(ret, trainData, trainX, trainY, trainIndices,
                         testData, testX, testIndices,
                         dirFlags, kernelWidths, split, maskWidth);
#endif
        NWKDEBase(result, trainData, trainX, trainY, trainIndices,
                  testData, testX, testIndices,
                  dirFlags, kernelWidths, split, maskWidth);
    }
}

#endif // NWKDE_PBCC
