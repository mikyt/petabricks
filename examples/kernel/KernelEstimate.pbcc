#ifndef KERNELESTIMATE_PBCC
#define KERNELESTIMATE_PBCC

#include "../linearsolve/LinearSolvePosDef.pbcc"
#include "utils.pbcc"

%{

inline double kernel(ConstMatrixRegion1D x0, ConstMatrixRegion1D x1, double h)
{
  int i, dim = x0.count();
  double temp, sum = 0;
  for (i = 0; i < dim; i++) {
    temp = (x0.cell(i) - x1.cell(i));
    sum += temp * temp;
  }
  return exp(-sum / (2 * h));
}

%}

// evaluates kernel function between X0 and each of columns of X
// using bandwidth H
transform KernelEvaluate
from X0[d], X[d,n], H
to OUT[n]
{
  OUT.cell(i) from (X0 x0, X.row(i) x, H h)
  {
    return kernel(x0, x, h);
  }
}

// n training samples, m test samples, d dimensions
// K is the Gram matrix of kernel inner products between training vectors
// A is the vector of regression coefficients
// H is the bandwidth of the kernel
transform KernelEstimate
from TRAINX[d,n], TRAINY[1,n], TESTX[d,m], H, LAMBDA
through A[n,1], K[n,n], K2[n,n], TRAINY2[n,1]
to ESTIMATEY[m]
{
  K.cell(i,j) from (TRAINX.row(i) xi,
                    TRAINX.row(j) xj,
                    H h)
  {
    return kernel(xi, xj, h);
  }

  K2.cell(i,j) from (K.cell(i,j) k, LAMBDA lambda)
  {
    if (i == j) {
      return k + lambda;
    } else {
      return k;
    }
  }

  TRAINY2.cell(i,0) from (TRAINY.cell(0,i) trainY, LAMBDA lambda)
  {
    return lambda * trainY;
  }

  to (A a) from (K2 k2, TRAINY2 trainY2)
  {
    LinearSolvePosDef(a, k2, trainY2);
  }

  ESTIMATEY.cell(i) from (TRAINX trainX, TESTX.row(i) testX, A a, H h)
  {
    double result;
    MatrixRegion1D ke = MatrixRegion1D::allocate(n);
    KernelEvaluate(ke, testX, trainX, h);
    DotProduct(result, ke, a.row(0));
    return result;
  }
}

#endif // KERNELESTIMATE_PBCC
