#ifndef UTILS_PBCC
#define UTILS_PBCC

#include "nan.h"

%{

template<typename ConstMatrixRegion2D>
void printMatrix(ConstMatrixRegion2D A)
{
  A.useOnCpu();
  for (int j = 0; j < A.size(1); j++) {
    for (int i = 0; i < A.size(0); i++) {
      printf("%g ", (ElementT) A.cell(i, j));
    }
    printf("\n");
  }
  printf("\n");
}

template<typename ConstMatrixRegion1D>
int findMinAndMax(ElementT *min, ElementT *max, ConstMatrixRegion1D array)
{
    array.useOnCpu();
    *min = *max = array.cell(0);
    for (int i = 1; i < array.count(); ++i) {
        if (array.cell(i) < *min) {
            *min = array.cell(i);
        }
        if (array.cell(i) > *max) {
            *max = array.cell(i);
        }
    }

    return 0;
}

template<typename ConstMatrixRegion1D, typename ConstMatrixRegion2D>
inline ElementT lookup(const ConstMatrixRegion2D data,
                       const ConstMatrixRegion1D var,
                       const IndexT index)
{
    return data.cell(var.cell(0), index + var.cell(1));
}

template<typename ConstMatrixRegion2D>
inline ElementT lookup(const ConstMatrixRegion2D data,
                       const ConstMatrixRegion2D var,
                       const IndexT row,
                       const IndexT index)
{
    return data.cell(var.cell(0, row), index + var.cell(1, row));
}

template<typename ConstMatrixRegion1D, typename ConstMatrixRegion2D>
inline int indexIsValid(const ConstMatrixRegion2D data,
                        const ConstMatrixRegion2D x,
                        const ConstMatrixRegion1D dir,
                        IndexT index)
{
    for (IndexT i = 0; i < x.size(1); ++i) {
        if (ISNAN(data.cell(x.cell(0, i), index + x.cell(1, i)))) {
            return false;
        }
    }
    if (ISNAN(data.cell(dir.cell(0), index + dir.cell(1)))) {
        return false;
    }
    return true;
}

template<typename ConstMatrixRegion1D, typename ConstMatrixRegion2D>
inline int indexIsValid(const ConstMatrixRegion2D data,
                        const ConstMatrixRegion2D x,
                        const ConstMatrixRegion1D dir,
                        const ConstMatrixRegion1D y, IndexT index)
{
    for (IndexT i = 0; i < x.size(1); ++i) {
        if (ISNAN(data.cell(x.cell(0, i), index + x.cell(1, i)))) {
            return false;
        }
    }
    if (ISNAN(data.cell(dir.cell(0), index + dir.cell(1))) ||
        ISNAN(data.cell(y.cell(0), index + y.cell(1)))) {
        return false;
    }
    return true;
}

%}

#endif // UTILS_PBCC
