#ifndef QR_PBCC
#define QR_PBCC

#include "../simple/macros.h"
#include "../simple/copy.pbcc"
#include "../simple/norm.pbcc"
#include "../simple/scale.pbcc"
#include "../multiply/multiply.pbcc"
#include "QRLAPACK.pbcc"

transform Init1D
from VALUE
to A[n]
{
    to (A.cell(i) a) from (VALUE val)
    {
        a = val;
    }
}

transform Init2D
from VALUE
to A[n,m]
{
    to (A.cell(j,i) a) from (VALUE val)
    {
        a = val;
    }
}

// Perform a LAPACK-style QR using Householder reflections.
//
// On entry, A contains the matrix to be factored; on exit, the upper triangular
// part of A contains R, and the lower triangular part (along with TAU) contains
// a representation of the k elementary reflectors whose product is Q.
//
// See LAPACK documentation for DGEQRF for more details.
transform QRReflectors
to A[n,m], TAU[n]
{
    // non-blocked version, similar to DGEQR2
    to (A a, TAU tau) from ()
    {
        IndexT i;
        ElementT alpha, beta, xnorm;
        MatrixRegion2D v, a2, work, w2;
        work = MatrixRegion2D::allocate(1, n);
        for (i = 0; i < n; ++i) {

            // if last row, we're done
            if (i >= m-1) {
                tau.cell(i) = 0;
                break;
            }

            Norm1D(xnorm, a.column(i).region(i+1, m), 2.0);
            if (xnorm == 0.0) {
                tau.cell(i) = 0;
                continue;
            }

            // compute reflector
            alpha = a.cell(i, i);
            beta = sqrt(alpha * alpha + xnorm * xnorm);
            beta = alpha > 0 ? -beta : beta;
            tau.cell(i) = (beta - alpha) / beta;
            Scale2D(a.region(i, i+1, i+1, m), 1.0 / (alpha - beta));

            // if last column, we're done
            if (i >= n-1) {
                a.cell(i, i) = beta;
                break;
            }

            v  = a.region(i  , i, i+1, m);
            a2 = a.region(i+1, i, n  , m);
            w2 = work.region(0, i+1, 1, n);

            // apply reflector to trailing matrix
            a.cell(i, i) = 1;
            MatrixMultiply(w2, a2.transposed(), v);
            MatrixMultiplyAdd(a2, -tau.cell(i), v, w2.transposed(), 1.0);
            a.cell(i, i) = beta;
        }
    }

    // call LAPACK
    to (A a, TAU tau) from ()
    {
        QRLAPACK(a, tau, a);
    }
}

// TODO: implement tunable blocked version of QRReflectors

// compute Q matrix from representation generated by QRReflectors
transform QRReflectorsGenerate
from TAU[n]
to Q[n,m]
{
    to (Q q) from (TAU tau)
    {
        QRReflectorsGenerateLAPACK(q, q, tau);
    }

    // TODO: implement native Petabricks version
}

// On entry, Q contains the matrix to be factored; on exit, it contains Q.
transform QRInPlace
to Q[n,m], R[n,n]
{
    // Householder
    to (Q q, R r) from ()
    {
        MatrixRegion1D tau = MatrixRegion1D::allocate(n);
        IndexT i, j;
        QRReflectors(q, tau);
        Copy2D(r, q.region(0, 0, n, MIN(m,n)));
        for (i = 1; i < n; ++i) {
            for (j = 0; j < i; ++j) {
                r.cell(j, i) = 0;
            }
        }
        QRReflectorsGenerate(q, tau);
    }

//  // Modified Gram-Schmidt
//  //   works, but may not give identical solution to Householder
//  //   due to some basis vectors having opposite sign
//  to (Q q, R r) from ()
//  {
//      IndexT i, j;
//      Init2D(r, 0);
//      for (i = 0; i < n; ++i) {
//          Norm1D(r.cell(i, i), q.col(i), 2.0);
//          Scale1D(q.col(i), 1.0 / r.cell(i, i));
//          MatrixMultiply(r.region(i+1, i, n  , i+1),
//                         q.region(i  , 0, i+1, m  ).transposed(),
//                         q.region(i+1, 0, n  , m  ));
//          MatrixMultiplyAdd(q.region(i+1, 0, n  , m  ), -1.0,
//                            q.region(i  , 0, i+1, m  ),
//                            r.region(i+1, i, n  , i+1), 1.0);
//      }
//  }
}

transform QR
from A[n,m]
to Q[n,m], R[n,n]
{
    to (Q q, R r)
    from (A a)
    {
        Copy2D(q, a);
        QRInPlace(q, r);
    }
}

#endif // QR_PBCC
