#ifndef QRLAPACK_PBCC
#define QRLAPACK_PBCC

#include "../simple/macros.h"
#define INDEX2D(i0, i1, s0) ((i1) * (s0) + (i0))

%{
// xGEQRF
extern "C" void dgeqrf_(const int *m, const int *n, double *A, const int *lda, double *tau, double *work, const int *lwork, int *info);
extern "C" void sgeqrf_(const int *m, const int *n, float *A, const int *lda, float *tau, float *work, const int *lwork, int *info);

void geqrf_wrap(const int *m, const int *n, double *A, const int *lda, double *tau, double *work, const int *lwork, int *info) {
  dgeqrf_(m, n, A, lda, tau, work, lwork, info);
}
void geqrf_wrap(const int *m, const int *n, float *A, const int *lda, float *tau, float *work, const int *lwork, int *info) {
  sgeqrf_(m, n, A, lda, tau, work, lwork, info);
}

// xORGQR
extern "C" void dorgqr_(const int *m, const int *n, const int *k, double *A, const int *lda, double *tau, double *work, const int *lwork, int *info);
extern "C" void sorgqr_(const int *m, const int *n, const int *k, float *A, const int *lda, float *tau, float *work, const int *lwork, int *info);

void orgqr_wrap(const int *m, const int *n, const int *k, double *A, const int *lda, double *tau, double *work, const int *lwork, int *info) {
  dorgqr_(m, n, k, A, lda, tau, work, lwork, info);
}
void orgqr_wrap(const int *m, const int *n, const int *k, float *A, const int *lda, float *tau, float *work, const int *lwork, int *info) {
  sorgqr_(m, n, k, A, lda, tau, work, lwork, info);
}
%}

transform QRReflectorsGenerateLAPACK
from IN[n,m], TAU[n]
to OUT[n,m]
{
    to (OUT out)
    from (IN in, TAU tau)
    {
        const int lda = m;
        int lwork, info = 0, k = MIN(m,n);
        ElementT *A = NULL, *tauArray = NULL, *work = NULL, temp;

        A = new ElementT[m * n];
        tauArray = new ElementT[k];
        if (!A || !tauArray) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // pack input
        int i, j;
        for (j = 0; j < n; ++j) {
            for (i = 0; i < m; ++i) {
                // PetaBricks - first index is column, second is row
                A[INDEX2D(i, j, m)] = in.cell(j, i);
            }
        }
        for (i = 0; i < k; ++i) {
            tauArray[i] = tau.cell(i);
        }

        // query for optimal work array size
        lwork = -1;
        orgqr_wrap(&m, &n, &k, A, &lda, tauArray, &temp, &lwork, &info);
        if (info) {
            printf("LAPACK error in call to dgeqrf: info = %d\n", info);
            exit(-1);
        }
        lwork = temp;

        // allocate work array
        work = new ElementT[lwork];
        if (!work) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // do work
        orgqr_wrap(&m, &n, &k, A, &lda, tauArray, work, &lwork, &info);
        if (info) {
            printf("LAPACK error in call to dgeqrf: info = %d\n", info);
            exit(-1);
        }

        // unpack output
        for (j = 0; j < n; ++j) {
            for (i = 0; i < m; ++i) {
                out.cell(j, i) = A[INDEX2D(i, j, m)];
            }
        }

        delete [] A;
        delete [] tauArray;
        delete [] work;
    }
}

transform QRLAPACK
from IN[n,m]
to OUT[n,m], TAU[n]
{
    to (OUT out, TAU tau)
    from (IN in)
    {
        const int lda = m;
        int lwork, info = 0, k = MIN(m,n);
        ElementT *A = NULL, *tauArray = NULL, *work = NULL, temp;

        A = new ElementT[m * n];
        tauArray = new ElementT[k];
        if (!A || !tauArray) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // pack input
        int i, j;
        for (j = 0; j < n; ++j) {
            for (i = 0; i < m; ++i) {
                // PetaBricks - first index is column, second is row
                A[INDEX2D(i, j, m)] = in.cell(j, i);
            }
        }

        // query for optimal work array size
        lwork = -1;
        geqrf_wrap(&m, &n, A, &lda, tauArray, &temp, &lwork, &info);
        if (info) {
            printf("LAPACK error in call to dgeqrf: info = %d\n", info);
            exit(-1);
        }
        lwork = temp;

        // allocate work array
        work = new ElementT[lwork];
        if (!work) {
            printf("Error allocating memory!\n");
            exit(-1);
        }

        // do factorization
        geqrf_wrap(&m, &n, A, &lda, tauArray, work, &lwork, &info);
        if (info) {
            printf("LAPACK error in call to dgeqrf: info = %d\n", info);
            exit(-1);
        }

        // unpack output
        for (j = 0; j < n; ++j) {
            for (i = 0; i < m; ++i) {
                out.cell(j, i) = A[INDEX2D(i, j, m)];
            }
        }
        for (i = 0; i < k; ++i) {
            tau.cell(i) = tauArray[i];
        }
        for (i = k; i < n; ++i) {
            tau.cell(i) = 0;
        }

        delete [] A;
        delete [] tauArray;
        delete [] work;
    }
}

#endif // QRLAPACK_PBCC
